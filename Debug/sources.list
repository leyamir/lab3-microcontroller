
sources.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bcc  08002bcc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bcc  08002bcc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bcc  08002bcc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000003c  08002c10  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002c10  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009330  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a3  00000000  00000000  00029395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a5e  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b209  00000000  00000000  00042bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822e6  00000000  00000000  0004ddb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d009d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000d00f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b94 	.word	0x08002b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002b94 	.word	0x08002b94

0800014c <get_mode_input>:

int mode_reg_3 = NORMAL_STATE;

change_mode = 0;

void get_mode_input() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	mode_reg_0 = mode_reg_1;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <get_mode_input+0x64>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <get_mode_input+0x68>)
 8000156:	6013      	str	r3, [r2, #0]
	mode_reg_1 = mode_reg_2;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <get_mode_input+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a14      	ldr	r2, [pc, #80]	; (80001b0 <get_mode_input+0x64>)
 800015e:	6013      	str	r3, [r2, #0]
	mode_reg_2 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000164:	4815      	ldr	r0, [pc, #84]	; (80001bc <get_mode_input+0x70>)
 8000166:	f001 fcd5 	bl	8001b14 <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	461a      	mov	r2, r3
 800016e:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <get_mode_input+0x6c>)
 8000170:	601a      	str	r2, [r3, #0]
	if ((mode_reg_0 == mode_reg_1) && (mode_reg_1 == mode_reg_2)) {
 8000172:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <get_mode_input+0x68>)
 8000174:	681a      	ldr	r2, [r3, #0]
 8000176:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <get_mode_input+0x64>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	429a      	cmp	r2, r3
 800017c:	d116      	bne.n	80001ac <get_mode_input+0x60>
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <get_mode_input+0x64>)
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <get_mode_input+0x6c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	429a      	cmp	r2, r3
 8000188:	d110      	bne.n	80001ac <get_mode_input+0x60>
		if (mode_reg_3 != mode_reg_2) {
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <get_mode_input+0x74>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <get_mode_input+0x6c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d00a      	beq.n	80001ac <get_mode_input+0x60>
			mode_reg_3 = mode_reg_2;
 8000196:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <get_mode_input+0x6c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <get_mode_input+0x74>)
 800019c:	6013      	str	r3, [r2, #0]
			if (mode_reg_2 == PRESSED_STATE) {
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <get_mode_input+0x6c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d102      	bne.n	80001ac <get_mode_input+0x60>
				// TODO change mode
				change_mode = 1;
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <get_mode_input+0x78>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000008 	.word	0x20000008
 80001bc:	40010800 	.word	0x40010800
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	20000058 	.word	0x20000058

080001c8 <get_inc_input>:

int inc_reg_3 = NORMAL_STATE;

inc_detect = 0;

void get_inc_input() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	inc_reg_0 = inc_reg_1;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <get_inc_input+0x64>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <get_inc_input+0x68>)
 80001d2:	6013      	str	r3, [r2, #0]
	inc_reg_1 = inc_reg_2;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <get_inc_input+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a14      	ldr	r2, [pc, #80]	; (800022c <get_inc_input+0x64>)
 80001da:	6013      	str	r3, [r2, #0]
	inc_reg_2 = HAL_GPIO_ReadPin(GPIOA, INC_Pin);
 80001dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e0:	4815      	ldr	r0, [pc, #84]	; (8000238 <get_inc_input+0x70>)
 80001e2:	f001 fc97 	bl	8001b14 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <get_inc_input+0x6c>)
 80001ec:	601a      	str	r2, [r3, #0]
	if ((inc_reg_0 == inc_reg_1) && (inc_reg_1 == inc_reg_2)) {
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <get_inc_input+0x68>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <get_inc_input+0x64>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d116      	bne.n	8000228 <get_inc_input+0x60>
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <get_inc_input+0x64>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <get_inc_input+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d110      	bne.n	8000228 <get_inc_input+0x60>
		if (inc_reg_3 != inc_reg_2) {
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <get_inc_input+0x74>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <get_inc_input+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	429a      	cmp	r2, r3
 8000210:	d00a      	beq.n	8000228 <get_inc_input+0x60>
			inc_reg_3 = inc_reg_2;
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <get_inc_input+0x6c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a09      	ldr	r2, [pc, #36]	; (800023c <get_inc_input+0x74>)
 8000218:	6013      	str	r3, [r2, #0]
			if (inc_reg_2 == PRESSED_STATE) {
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <get_inc_input+0x6c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d102      	bne.n	8000228 <get_inc_input+0x60>
				// TODO
				inc_detect = 1;
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <get_inc_input+0x78>)
 8000224:	2201      	movs	r2, #1
 8000226:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000014 	.word	0x20000014
 8000230:	20000010 	.word	0x20000010
 8000234:	20000018 	.word	0x20000018
 8000238:	40010800 	.word	0x40010800
 800023c:	2000001c 	.word	0x2000001c
 8000240:	2000005c 	.word	0x2000005c

08000244 <get_set_input>:

int set_reg_3 = NORMAL_STATE;

save_all_change = 0;

void get_set_input() {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	set_reg_0 = set_reg_1;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <get_set_input+0x64>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <get_set_input+0x68>)
 800024e:	6013      	str	r3, [r2, #0]
	set_reg_1 = set_reg_2;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <get_set_input+0x6c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <get_set_input+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
	set_reg_2 = HAL_GPIO_ReadPin(GPIOA, SET_Pin);
 8000258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025c:	4815      	ldr	r0, [pc, #84]	; (80002b4 <get_set_input+0x70>)
 800025e:	f001 fc59 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	461a      	mov	r2, r3
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <get_set_input+0x6c>)
 8000268:	601a      	str	r2, [r3, #0]
	if ((set_reg_0 == set_reg_1) && (set_reg_1 == set_reg_2)) {
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <get_set_input+0x68>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <get_set_input+0x64>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	429a      	cmp	r2, r3
 8000274:	d116      	bne.n	80002a4 <get_set_input+0x60>
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <get_set_input+0x64>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <get_set_input+0x6c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	429a      	cmp	r2, r3
 8000280:	d110      	bne.n	80002a4 <get_set_input+0x60>
		if (set_reg_3 != set_reg_2) {
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <get_set_input+0x74>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <get_set_input+0x6c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	429a      	cmp	r2, r3
 800028c:	d00a      	beq.n	80002a4 <get_set_input+0x60>
			set_reg_3 = set_reg_2;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <get_set_input+0x6c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <get_set_input+0x74>)
 8000294:	6013      	str	r3, [r2, #0]
			if (set_reg_2 == PRESSED_STATE) {
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <get_set_input+0x6c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d102      	bne.n	80002a4 <get_set_input+0x60>
				// TODO
				save_all_change = 1;
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <get_set_input+0x78>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000024 	.word	0x20000024
 80002ac:	20000020 	.word	0x20000020
 80002b0:	20000028 	.word	0x20000028
 80002b4:	40010800 	.word	0x40010800
 80002b8:	2000002c 	.word	0x2000002c
 80002bc:	20000060 	.word	0x20000060

080002c0 <init_data>:
 */

#include "global.h"
#include "main.h"

void init_data() {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	duration = 500;
 80002c4:	4b2d      	ldr	r3, [pc, #180]	; (800037c <init_data+0xbc>)
 80002c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002ca:	601a      	str	r2, [r3, #0]
	frequent = 1000 / duration;
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <init_data+0xbc>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80002d8:	4a29      	ldr	r2, [pc, #164]	; (8000380 <init_data+0xc0>)
 80002da:	6013      	str	r3, [r2, #0]
	mode = 1;
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <init_data+0xc4>)
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
	red_count_down = DEFAULT_RED_COUNT_DOWN;
 80002e2:	4b29      	ldr	r3, [pc, #164]	; (8000388 <init_data+0xc8>)
 80002e4:	2205      	movs	r2, #5
 80002e6:	601a      	str	r2, [r3, #0]
	green_count_down = DEFAULT_GREEN_COUNT_DOWN;
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <init_data+0xcc>)
 80002ea:	2203      	movs	r2, #3
 80002ec:	601a      	str	r2, [r3, #0]
	yellow_count_down = DEFAULT_YELLOW_COUNT_DOWN;
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <init_data+0xd0>)
 80002f0:	2202      	movs	r2, #2
 80002f2:	601a      	str	r2, [r3, #0]

	current_state_trafic1 = RED_STATE;
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <init_data+0xd4>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]
	current_state_trafic2 = GREEN_STATE;
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <init_data+0xd8>)
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
	trafic1_count_down = red_count_down;
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <init_data+0xc8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <init_data+0xdc>)
 8000306:	6013      	str	r3, [r2, #0]
	trafic2_count_down = green_count_down;
 8000308:	4b20      	ldr	r3, [pc, #128]	; (800038c <init_data+0xcc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a24      	ldr	r2, [pc, #144]	; (80003a0 <init_data+0xe0>)
 800030e:	6013      	str	r3, [r2, #0]

	seg7_led_buffer[0] = trafic1_count_down / 10;
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <init_data+0xdc>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a23      	ldr	r2, [pc, #140]	; (80003a4 <init_data+0xe4>)
 8000316:	fb82 1203 	smull	r1, r2, r2, r3
 800031a:	1092      	asrs	r2, r2, #2
 800031c:	17db      	asrs	r3, r3, #31
 800031e:	1ad3      	subs	r3, r2, r3
 8000320:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <init_data+0xe8>)
 8000322:	6013      	str	r3, [r2, #0]
	seg7_led_buffer[1] = trafic1_count_down % 10;
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <init_data+0xdc>)
 8000326:	6819      	ldr	r1, [r3, #0]
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <init_data+0xe4>)
 800032a:	fb83 2301 	smull	r2, r3, r3, r1
 800032e:	109a      	asrs	r2, r3, #2
 8000330:	17cb      	asrs	r3, r1, #31
 8000332:	1ad2      	subs	r2, r2, r3
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	1aca      	subs	r2, r1, r3
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <init_data+0xe8>)
 8000340:	605a      	str	r2, [r3, #4]
	seg7_led_buffer[2] = trafic2_count_down / 10;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <init_data+0xe0>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <init_data+0xe4>)
 8000348:	fb82 1203 	smull	r1, r2, r2, r3
 800034c:	1092      	asrs	r2, r2, #2
 800034e:	17db      	asrs	r3, r3, #31
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init_data+0xe8>)
 8000354:	6093      	str	r3, [r2, #8]
	seg7_led_buffer[3] = trafic2_count_down % 10;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <init_data+0xe0>)
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <init_data+0xe4>)
 800035c:	fb83 2301 	smull	r2, r3, r3, r1
 8000360:	109a      	asrs	r2, r3, #2
 8000362:	17cb      	asrs	r3, r1, #31
 8000364:	1ad2      	subs	r2, r2, r3
 8000366:	4613      	mov	r3, r2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	4413      	add	r3, r2
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	1aca      	subs	r2, r1, r3
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <init_data+0xe8>)
 8000372:	60da      	str	r2, [r3, #12]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	20000094 	.word	0x20000094
 8000380:	20000088 	.word	0x20000088
 8000384:	20000090 	.word	0x20000090
 8000388:	2000009c 	.word	0x2000009c
 800038c:	200000ac 	.word	0x200000ac
 8000390:	20000098 	.word	0x20000098
 8000394:	200000a0 	.word	0x200000a0
 8000398:	200000a8 	.word	0x200000a8
 800039c:	2000008c 	.word	0x2000008c
 80003a0:	200000a4 	.word	0x200000a4
 80003a4:	66666667 	.word	0x66666667
 80003a8:	20000078 	.word	0x20000078

080003ac <normal_led_buffer>:
#include "timer.h"
#include "main.h"
#include "global.h"
seg7_led_order = 0;

void normal_led_buffer() {
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = trafic1_count_down / 10;
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <normal_led_buffer+0x70>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <normal_led_buffer+0x74>)
 80003b6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ba:	1092      	asrs	r2, r2, #2
 80003bc:	17db      	asrs	r3, r3, #31
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	4a18      	ldr	r2, [pc, #96]	; (8000424 <normal_led_buffer+0x78>)
 80003c2:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = trafic1_count_down % 10;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <normal_led_buffer+0x70>)
 80003c6:	6819      	ldr	r1, [r3, #0]
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <normal_led_buffer+0x74>)
 80003ca:	fb83 2301 	smull	r2, r3, r3, r1
 80003ce:	109a      	asrs	r2, r3, #2
 80003d0:	17cb      	asrs	r3, r1, #31
 80003d2:	1ad2      	subs	r2, r2, r3
 80003d4:	4613      	mov	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4413      	add	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	1aca      	subs	r2, r1, r3
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <normal_led_buffer+0x78>)
 80003e0:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = trafic2_count_down / 10;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <normal_led_buffer+0x7c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <normal_led_buffer+0x74>)
 80003e8:	fb82 1203 	smull	r1, r2, r2, r3
 80003ec:	1092      	asrs	r2, r2, #2
 80003ee:	17db      	asrs	r3, r3, #31
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <normal_led_buffer+0x78>)
 80003f4:	6093      	str	r3, [r2, #8]
	  seg7_led_buffer[3] = trafic2_count_down % 10;
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <normal_led_buffer+0x7c>)
 80003f8:	6819      	ldr	r1, [r3, #0]
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <normal_led_buffer+0x74>)
 80003fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000400:	109a      	asrs	r2, r3, #2
 8000402:	17cb      	asrs	r3, r1, #31
 8000404:	1ad2      	subs	r2, r2, r3
 8000406:	4613      	mov	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4413      	add	r3, r2
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	1aca      	subs	r2, r1, r3
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <normal_led_buffer+0x78>)
 8000412:	60da      	str	r2, [r3, #12]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	2000008c 	.word	0x2000008c
 8000420:	66666667 	.word	0x66666667
 8000424:	20000078 	.word	0x20000078
 8000428:	200000a4 	.word	0x200000a4

0800042c <adjust_mode_red_led_buffer>:

void adjust_mode_red_led_buffer() {
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = red_count_down / 10;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <adjust_mode_red_led_buffer+0x4c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a11      	ldr	r2, [pc, #68]	; (800047c <adjust_mode_red_led_buffer+0x50>)
 8000436:	fb82 1203 	smull	r1, r2, r2, r3
 800043a:	1092      	asrs	r2, r2, #2
 800043c:	17db      	asrs	r3, r3, #31
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <adjust_mode_red_led_buffer+0x54>)
 8000442:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = red_count_down % 10;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <adjust_mode_red_led_buffer+0x4c>)
 8000446:	6819      	ldr	r1, [r3, #0]
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <adjust_mode_red_led_buffer+0x50>)
 800044a:	fb83 2301 	smull	r2, r3, r3, r1
 800044e:	109a      	asrs	r2, r3, #2
 8000450:	17cb      	asrs	r3, r1, #31
 8000452:	1ad2      	subs	r2, r2, r3
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	1aca      	subs	r2, r1, r3
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <adjust_mode_red_led_buffer+0x54>)
 8000460:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = 0;
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <adjust_mode_red_led_buffer+0x54>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
	  seg7_led_buffer[3] = mode;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <adjust_mode_red_led_buffer+0x58>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <adjust_mode_red_led_buffer+0x54>)
 800046e:	60d3      	str	r3, [r2, #12]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	2000009c 	.word	0x2000009c
 800047c:	66666667 	.word	0x66666667
 8000480:	20000078 	.word	0x20000078
 8000484:	20000090 	.word	0x20000090

08000488 <adjust_mode_yellow_led_buffer>:

void adjust_mode_yellow_led_buffer() {
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = yellow_count_down / 10;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <adjust_mode_yellow_led_buffer+0x4c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <adjust_mode_yellow_led_buffer+0x50>)
 8000492:	fb82 1203 	smull	r1, r2, r2, r3
 8000496:	1092      	asrs	r2, r2, #2
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <adjust_mode_yellow_led_buffer+0x54>)
 800049e:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = yellow_count_down % 10;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <adjust_mode_yellow_led_buffer+0x4c>)
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <adjust_mode_yellow_led_buffer+0x50>)
 80004a6:	fb83 2301 	smull	r2, r3, r3, r1
 80004aa:	109a      	asrs	r2, r3, #2
 80004ac:	17cb      	asrs	r3, r1, #31
 80004ae:	1ad2      	subs	r2, r2, r3
 80004b0:	4613      	mov	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4413      	add	r3, r2
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	1aca      	subs	r2, r1, r3
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <adjust_mode_yellow_led_buffer+0x54>)
 80004bc:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = 0;
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <adjust_mode_yellow_led_buffer+0x54>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
	  seg7_led_buffer[3] = mode;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <adjust_mode_yellow_led_buffer+0x58>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <adjust_mode_yellow_led_buffer+0x54>)
 80004ca:	60d3      	str	r3, [r2, #12]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20000098 	.word	0x20000098
 80004d8:	66666667 	.word	0x66666667
 80004dc:	20000078 	.word	0x20000078
 80004e0:	20000090 	.word	0x20000090

080004e4 <adjust_mode_green_led_buffer>:

void adjust_mode_green_led_buffer() {
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = green_count_down / 10;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <adjust_mode_green_led_buffer+0x4c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <adjust_mode_green_led_buffer+0x50>)
 80004ee:	fb82 1203 	smull	r1, r2, r2, r3
 80004f2:	1092      	asrs	r2, r2, #2
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <adjust_mode_green_led_buffer+0x54>)
 80004fa:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = green_count_down % 10;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <adjust_mode_green_led_buffer+0x4c>)
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <adjust_mode_green_led_buffer+0x50>)
 8000502:	fb83 2301 	smull	r2, r3, r3, r1
 8000506:	109a      	asrs	r2, r3, #2
 8000508:	17cb      	asrs	r3, r1, #31
 800050a:	1ad2      	subs	r2, r2, r3
 800050c:	4613      	mov	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4413      	add	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	1aca      	subs	r2, r1, r3
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <adjust_mode_green_led_buffer+0x54>)
 8000518:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = 0;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <adjust_mode_green_led_buffer+0x54>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
	  seg7_led_buffer[3] = mode;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <adjust_mode_green_led_buffer+0x58>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <adjust_mode_green_led_buffer+0x54>)
 8000526:	60d3      	str	r3, [r2, #12]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	200000ac 	.word	0x200000ac
 8000534:	66666667 	.word	0x66666667
 8000538:	20000078 	.word	0x20000078
 800053c:	20000090 	.word	0x20000090

08000540 <show_red>:

void show_red(int road) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if (road == 1) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10f      	bne.n	800056e <show_red+0x2e>
		  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2120      	movs	r1, #32
 8000552:	4813      	ldr	r0, [pc, #76]	; (80005a0 <show_red+0x60>)
 8000554:	f001 faf5 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	4810      	ldr	r0, [pc, #64]	; (80005a0 <show_red+0x60>)
 800055e:	f001 faf0 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	480e      	ldr	r0, [pc, #56]	; (80005a0 <show_red+0x60>)
 8000568:	f001 faeb 	bl	8001b42 <HAL_GPIO_WritePin>
	} else if (road == 2) {
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
	}
}
 800056c:	e014      	b.n	8000598 <show_red+0x58>
	} else if (road == 2) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d111      	bne.n	8000598 <show_red+0x58>
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <show_red+0x60>)
 800057c:	f001 fae1 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <show_red+0x60>)
 8000588:	f001 fadb 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <show_red+0x60>)
 8000594:	f001 fad5 	bl	8001b42 <HAL_GPIO_WritePin>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40010800 	.word	0x40010800

080005a4 <show_green>:
void show_green(int road) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	if (road == 1) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d10f      	bne.n	80005d2 <show_green+0x2e>
		  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <show_green+0x60>)
 80005b8:	f001 fac3 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <show_green+0x60>)
 80005c2:	f001 fabe 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	480e      	ldr	r0, [pc, #56]	; (8000604 <show_green+0x60>)
 80005cc:	f001 fab9 	bl	8001b42 <HAL_GPIO_WritePin>
	} else if (road == 2) {
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
	}
}
 80005d0:	e014      	b.n	80005fc <show_green+0x58>
	} else if (road == 2) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d111      	bne.n	80005fc <show_green+0x58>
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <show_green+0x60>)
 80005e0:	f001 faaf 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <show_green+0x60>)
 80005ec:	f001 faa9 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <show_green+0x60>)
 80005f8:	f001 faa3 	bl	8001b42 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010800 	.word	0x40010800

08000608 <show_yellow>:
void show_yellow(int road) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if (road == 1) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d10f      	bne.n	8000636 <show_yellow+0x2e>
		  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	4813      	ldr	r0, [pc, #76]	; (8000668 <show_yellow+0x60>)
 800061c:	f001 fa91 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <show_yellow+0x60>)
 8000626:	f001 fa8c 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <show_yellow+0x60>)
 8000630:	f001 fa87 	bl	8001b42 <HAL_GPIO_WritePin>
	} else if (road == 2) {
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
	}
}
 8000634:	e014      	b.n	8000660 <show_yellow+0x58>
	} else if (road == 2) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d111      	bne.n	8000660 <show_yellow+0x58>
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <show_yellow+0x60>)
 8000644:	f001 fa7d 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <show_yellow+0x60>)
 8000650:	f001 fa77 	bl	8001b42 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <show_yellow+0x60>)
 800065c:	f001 fa71 	bl	8001b42 <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40010800 	.word	0x40010800

0800066c <init_led>:

void init_led() {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2120      	movs	r1, #32
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <init_led+0x4c>)
 8000676:	f001 fa64 	bl	8001b42 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	480e      	ldr	r0, [pc, #56]	; (80006b8 <init_led+0x4c>)
 8000680:	f001 fa5f 	bl	8001b42 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <init_led+0x4c>)
 800068a:	f001 fa5a 	bl	8001b42 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <init_led+0x4c>)
 8000696:	f001 fa54 	bl	8001b42 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <init_led+0x4c>)
 80006a2:	f001 fa4e 	bl	8001b42 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <init_led+0x4c>)
 80006ae:	f001 fa48 	bl	8001b42 <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40010800 	.word	0x40010800

080006bc <display7SEG>:

void display7SEG(int num, GPIO_TypeDef * GPIO_TYPE, uint16_t a_Pin, uint16_t b_Pin, uint16_t c_Pin, uint16_t d_Pin, uint16_t e_Pin, uint16_t f_Pin, uint16_t g_Pin) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4611      	mov	r1, r2
 80006c8:	461a      	mov	r2, r3
 80006ca:	460b      	mov	r3, r1
 80006cc:	80fb      	strh	r3, [r7, #6]
 80006ce:	4613      	mov	r3, r2
 80006d0:	80bb      	strh	r3, [r7, #4]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b09      	cmp	r3, #9
 80006d6:	f200 81c5 	bhi.w	8000a64 <display7SEG+0x3a8>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <display7SEG+0x24>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	08000709 	.word	0x08000709
 80006e4:	0800075f 	.word	0x0800075f
 80006e8:	080007b5 	.word	0x080007b5
 80006ec:	0800080b 	.word	0x0800080b
 80006f0:	08000861 	.word	0x08000861
 80006f4:	080008b7 	.word	0x080008b7
 80006f8:	0800090d 	.word	0x0800090d
 80006fc:	08000963 	.word	0x08000963
 8000700:	080009b9 	.word	0x080009b9
 8000704:	08000a0f 	.word	0x08000a0f
	switch (num){
		case 0:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	68b8      	ldr	r0, [r7, #8]
 8000710:	f001 fa17 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 8000714:	88bb      	ldrh	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	68b8      	ldr	r0, [r7, #8]
 800071c:	f001 fa11 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000720:	8b3b      	ldrh	r3, [r7, #24]
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f001 fa0b 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 800072c:	8bbb      	ldrh	r3, [r7, #28]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	68b8      	ldr	r0, [r7, #8]
 8000734:	f001 fa05 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 8000738:	8c3b      	ldrh	r3, [r7, #32]
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	68b8      	ldr	r0, [r7, #8]
 8000740:	f001 f9ff 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 8000744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	68b8      	ldr	r0, [r7, #8]
 800074c:	f001 f9f9 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_SET);
 8000750:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	68b8      	ldr	r0, [r7, #8]
 8000758:	f001 f9f3 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 800075c:	e183      	b.n	8000a66 <display7SEG+0x3aa>
		case 1:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_SET);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	68b8      	ldr	r0, [r7, #8]
 8000766:	f001 f9ec 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	4619      	mov	r1, r3
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f001 f9e6 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000776:	8b3b      	ldrh	r3, [r7, #24]
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	68b8      	ldr	r0, [r7, #8]
 800077e:	f001 f9e0 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_SET);
 8000782:	8bbb      	ldrh	r3, [r7, #28]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	68b8      	ldr	r0, [r7, #8]
 800078a:	f001 f9da 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	2201      	movs	r2, #1
 8000792:	4619      	mov	r1, r3
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f001 f9d4 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 800079a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f001 f9ce 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_SET);
 80007a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007a8:	2201      	movs	r2, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	68b8      	ldr	r0, [r7, #8]
 80007ae:	f001 f9c8 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 80007b2:	e158      	b.n	8000a66 <display7SEG+0x3aa>
		case 2:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f001 f9c1 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	68b8      	ldr	r0, [r7, #8]
 80007c8:	f001 f9bb 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_SET);
 80007cc:	8b3b      	ldrh	r3, [r7, #24]
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	68b8      	ldr	r0, [r7, #8]
 80007d4:	f001 f9b5 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 80007d8:	8bbb      	ldrh	r3, [r7, #28]
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	68b8      	ldr	r0, [r7, #8]
 80007e0:	f001 f9af 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 80007e4:	8c3b      	ldrh	r3, [r7, #32]
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f001 f9a9 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 80007f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f001 f9a3 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 80007fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	68b8      	ldr	r0, [r7, #8]
 8000804:	f001 f99d 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 8000808:	e12d      	b.n	8000a66 <display7SEG+0x3aa>
		case 3:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f001 f996 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f001 f990 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000822:	8b3b      	ldrh	r3, [r7, #24]
 8000824:	2200      	movs	r2, #0
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f001 f98a 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 800082e:	8bbb      	ldrh	r3, [r7, #28]
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f001 f984 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 800083a:	8c3b      	ldrh	r3, [r7, #32]
 800083c:	2201      	movs	r2, #1
 800083e:	4619      	mov	r1, r3
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f001 f97e 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 8000846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	68b8      	ldr	r0, [r7, #8]
 800084e:	f001 f978 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	68b8      	ldr	r0, [r7, #8]
 800085a:	f001 f972 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 800085e:	e102      	b.n	8000a66 <display7SEG+0x3aa>
		case 4:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_SET);
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	68b8      	ldr	r0, [r7, #8]
 8000868:	f001 f96b 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	68b8      	ldr	r0, [r7, #8]
 8000874:	f001 f965 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000878:	8b3b      	ldrh	r3, [r7, #24]
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f001 f95f 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_SET);
 8000884:	8bbb      	ldrh	r3, [r7, #28]
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f001 f959 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 8000890:	8c3b      	ldrh	r3, [r7, #32]
 8000892:	2201      	movs	r2, #1
 8000894:	4619      	mov	r1, r3
 8000896:	68b8      	ldr	r0, [r7, #8]
 8000898:	f001 f953 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 800089c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f001 f94d 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 80008a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	68b8      	ldr	r0, [r7, #8]
 80008b0:	f001 f947 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 80008b4:	e0d7      	b.n	8000a66 <display7SEG+0x3aa>
		case 5:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	68b8      	ldr	r0, [r7, #8]
 80008be:	f001 f940 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_SET);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	2201      	movs	r2, #1
 80008c6:	4619      	mov	r1, r3
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	f001 f93a 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 80008ce:	8b3b      	ldrh	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	68b8      	ldr	r0, [r7, #8]
 80008d6:	f001 f934 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 80008da:	8bbb      	ldrh	r3, [r7, #28]
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	68b8      	ldr	r0, [r7, #8]
 80008e2:	f001 f92e 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 80008e6:	8c3b      	ldrh	r3, [r7, #32]
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f001 f928 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 80008f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	68b8      	ldr	r0, [r7, #8]
 80008fa:	f001 f922 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 80008fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f001 f91c 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 800090a:	e0ac      	b.n	8000a66 <display7SEG+0x3aa>
		case 6:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	68b8      	ldr	r0, [r7, #8]
 8000914:	f001 f915 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_SET);
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	68b8      	ldr	r0, [r7, #8]
 8000920:	f001 f90f 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000924:	8b3b      	ldrh	r3, [r7, #24]
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	f001 f909 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 8000930:	8bbb      	ldrh	r3, [r7, #28]
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	68b8      	ldr	r0, [r7, #8]
 8000938:	f001 f903 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 800093c:	8c3b      	ldrh	r3, [r7, #32]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	68b8      	ldr	r0, [r7, #8]
 8000944:	f001 f8fd 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 8000948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	68b8      	ldr	r0, [r7, #8]
 8000950:	f001 f8f7 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000954:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	68b8      	ldr	r0, [r7, #8]
 800095c:	f001 f8f1 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 8000960:	e081      	b.n	8000a66 <display7SEG+0x3aa>
		case 7:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f001 f8ea 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	68b8      	ldr	r0, [r7, #8]
 8000976:	f001 f8e4 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 800097a:	8b3b      	ldrh	r3, [r7, #24]
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	68b8      	ldr	r0, [r7, #8]
 8000982:	f001 f8de 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_SET);
 8000986:	8bbb      	ldrh	r3, [r7, #28]
 8000988:	2201      	movs	r2, #1
 800098a:	4619      	mov	r1, r3
 800098c:	68b8      	ldr	r0, [r7, #8]
 800098e:	f001 f8d8 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 8000992:	8c3b      	ldrh	r3, [r7, #32]
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f001 f8d2 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 800099e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f001 f8cc 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_SET);
 80009aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009ac:	2201      	movs	r2, #1
 80009ae:	4619      	mov	r1, r3
 80009b0:	68b8      	ldr	r0, [r7, #8]
 80009b2:	f001 f8c6 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 80009b6:	e056      	b.n	8000a66 <display7SEG+0x3aa>
		case 8:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	68b8      	ldr	r0, [r7, #8]
 80009c0:	f001 f8bf 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	68b8      	ldr	r0, [r7, #8]
 80009cc:	f001 f8b9 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 80009d0:	8b3b      	ldrh	r3, [r7, #24]
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	68b8      	ldr	r0, [r7, #8]
 80009d8:	f001 f8b3 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 80009dc:	8bbb      	ldrh	r3, [r7, #28]
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	68b8      	ldr	r0, [r7, #8]
 80009e4:	f001 f8ad 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 80009e8:	8c3b      	ldrh	r3, [r7, #32]
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	68b8      	ldr	r0, [r7, #8]
 80009f0:	f001 f8a7 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 80009f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	f001 f8a1 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000a00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	68b8      	ldr	r0, [r7, #8]
 8000a08:	f001 f89b 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 8000a0c:	e02b      	b.n	8000a66 <display7SEG+0x3aa>
		case 9:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f001 f894 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	68b8      	ldr	r0, [r7, #8]
 8000a22:	f001 f88e 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000a26:	8b3b      	ldrh	r3, [r7, #24]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f001 f888 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 8000a32:	8bbb      	ldrh	r3, [r7, #28]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	68b8      	ldr	r0, [r7, #8]
 8000a3a:	f001 f882 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 8000a3e:	8c3b      	ldrh	r3, [r7, #32]
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	68b8      	ldr	r0, [r7, #8]
 8000a46:	f001 f87c 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 8000a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f001 f876 	bl	8001b42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	68b8      	ldr	r0, [r7, #8]
 8000a5e:	f001 f870 	bl	8001b42 <HAL_GPIO_WritePin>
			break;
 8000a62:	e000      	b.n	8000a66 <display7SEG+0x3aa>
		default:
			break;
 8000a64:	bf00      	nop
	}
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop

08000a70 <scan_seg7_led>:

void scan_seg7_led() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af06      	add	r7, sp, #24
	  if (seg7_flag == 1) {
 8000a76:	4b66      	ldr	r3, [pc, #408]	; (8000c10 <scan_seg7_led+0x1a0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	f040 80c4 	bne.w	8000c08 <scan_seg7_led+0x198>
		 switch (seg7_led_order) {
 8000a80:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	f200 80bb 	bhi.w	8000c00 <scan_seg7_led+0x190>
 8000a8a:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <scan_seg7_led+0x20>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000aa1 	.word	0x08000aa1
 8000a94:	08000af9 	.word	0x08000af9
 8000a98:	08000b51 	.word	0x08000b51
 8000a9c:	08000ba9 	.word	0x08000ba9
		 case 0:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	485c      	ldr	r0, [pc, #368]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000aa6:	f001 f84c 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2104      	movs	r1, #4
 8000aae:	485a      	ldr	r0, [pc, #360]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000ab0:	f001 f847 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	4857      	ldr	r0, [pc, #348]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000aba:	f001 f842 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4855      	ldr	r0, [pc, #340]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000ac4:	f001 f83d 	bl	8001b42 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000ac8:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a53      	ldr	r2, [pc, #332]	; (8000c1c <scan_seg7_led+0x1ac>)
 8000ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	9304      	str	r3, [sp, #16]
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	9303      	str	r3, [sp, #12]
 8000ada:	2310      	movs	r3, #16
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	2308      	movs	r3, #8
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	494d      	ldr	r1, [pc, #308]	; (8000c20 <scan_seg7_led+0x1b0>)
 8000aec:	f7ff fde6 	bl	80006bc <display7SEG>
			  seg7_led_order = 1;
 8000af0:	4b48      	ldr	r3, [pc, #288]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
			  break;
 8000af6:	e084      	b.n	8000c02 <scan_seg7_led+0x192>
		 case 1:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	4846      	ldr	r0, [pc, #280]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000afe:	f001 f820 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2104      	movs	r1, #4
 8000b06:	4844      	ldr	r0, [pc, #272]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b08:	f001 f81b 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	4841      	ldr	r0, [pc, #260]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b12:	f001 f816 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	483f      	ldr	r0, [pc, #252]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b1c:	f001 f811 	bl	8001b42 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000b20:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <scan_seg7_led+0x1ac>)
 8000b26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	9304      	str	r3, [sp, #16]
 8000b2e:	2320      	movs	r3, #32
 8000b30:	9303      	str	r3, [sp, #12]
 8000b32:	2310      	movs	r3, #16
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	2308      	movs	r3, #8
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2302      	movs	r3, #2
 8000b40:	2201      	movs	r2, #1
 8000b42:	4937      	ldr	r1, [pc, #220]	; (8000c20 <scan_seg7_led+0x1b0>)
 8000b44:	f7ff fdba 	bl	80006bc <display7SEG>
			  seg7_led_order = 2;
 8000b48:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	601a      	str	r2, [r3, #0]
			  break;
 8000b4e:	e058      	b.n	8000c02 <scan_seg7_led+0x192>
		 case 2:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	4830      	ldr	r0, [pc, #192]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b56:	f000 fff4 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	482e      	ldr	r0, [pc, #184]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b60:	f000 ffef 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2108      	movs	r1, #8
 8000b68:	482b      	ldr	r0, [pc, #172]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b6a:	f000 ffea 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2110      	movs	r1, #16
 8000b72:	4829      	ldr	r0, [pc, #164]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000b74:	f000 ffe5 	bl	8001b42 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <scan_seg7_led+0x1ac>)
 8000b7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b82:	2340      	movs	r3, #64	; 0x40
 8000b84:	9304      	str	r3, [sp, #16]
 8000b86:	2320      	movs	r3, #32
 8000b88:	9303      	str	r3, [sp, #12]
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2308      	movs	r3, #8
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	2304      	movs	r3, #4
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2302      	movs	r3, #2
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4921      	ldr	r1, [pc, #132]	; (8000c20 <scan_seg7_led+0x1b0>)
 8000b9c:	f7ff fd8e 	bl	80006bc <display7SEG>
			  seg7_led_order = 3;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	601a      	str	r2, [r3, #0]
			  break;
 8000ba6:	e02c      	b.n	8000c02 <scan_seg7_led+0x192>
		 case 3:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	481a      	ldr	r0, [pc, #104]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000bae:	f000 ffc8 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000bb8:	f000 ffc3 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4815      	ldr	r0, [pc, #84]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000bc2:	f000 ffbe 	bl	8001b42 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2110      	movs	r1, #16
 8000bca:	4813      	ldr	r0, [pc, #76]	; (8000c18 <scan_seg7_led+0x1a8>)
 8000bcc:	f000 ffb9 	bl	8001b42 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <scan_seg7_led+0x1ac>)
 8000bd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bda:	2340      	movs	r3, #64	; 0x40
 8000bdc:	9304      	str	r3, [sp, #16]
 8000bde:	2320      	movs	r3, #32
 8000be0:	9303      	str	r3, [sp, #12]
 8000be2:	2310      	movs	r3, #16
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	2308      	movs	r3, #8
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	2304      	movs	r3, #4
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2302      	movs	r3, #2
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	490b      	ldr	r1, [pc, #44]	; (8000c20 <scan_seg7_led+0x1b0>)
 8000bf4:	f7ff fd62 	bl	80006bc <display7SEG>
			  seg7_led_order = 0;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <scan_seg7_led+0x1a4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
			  break;
 8000bfe:	e000      	b.n	8000c02 <scan_seg7_led+0x192>
		 default:
			 break;
 8000c00:	bf00      	nop
		 }
		  set_seg7_led_timer(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f000 fc0a 	bl	800141c <set_seg7_led_timer>
	  }
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000070 	.word	0x20000070
 8000c14:	20000064 	.word	0x20000064
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	20000078 	.word	0x20000078
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <turn_off_all_led>:
void turn_off_all_led() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <turn_off_all_led+0x4c>)
 8000c2e:	f000 ff88 	bl	8001b42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <turn_off_all_led+0x4c>)
 8000c38:	f000 ff83 	bl	8001b42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <turn_off_all_led+0x4c>)
 8000c42:	f000 ff7e 	bl	8001b42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <turn_off_all_led+0x4c>)
 8000c4e:	f000 ff78 	bl	8001b42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <turn_off_all_led+0x4c>)
 8000c5a:	f000 ff72 	bl	8001b42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <turn_off_all_led+0x4c>)
 8000c66:	f000 ff6c 	bl	8001b42 <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010800 	.word	0x40010800

08000c74 <blink>:
void blink() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
 8000c78:	2120      	movs	r1, #32
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <blink+0x40>)
 8000c7c:	f000 ff79 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <blink+0x40>)
 8000c86:	f000 ff74 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GREEN1_Pin);
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <blink+0x40>)
 8000c8e:	f000 ff70 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GREEN2_Pin);
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <blink+0x40>)
 8000c98:	f000 ff6b 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, YELLOW1_Pin);
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <blink+0x40>)
 8000ca0:	f000 ff67 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, YELLOW2_Pin);
 8000ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <blink+0x40>)
 8000caa:	f000 ff62 	bl	8001b72 <HAL_GPIO_TogglePin>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fc40 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f852 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f8d8 	bl	8000e78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cc8:	f000 f88a 	bl	8000de0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2);
 8000ccc:	4821      	ldr	r0, [pc, #132]	; (8000d54 <main+0x9c>)
 8000cce:	f001 fba1 	bl	8002414 <HAL_TIM_Base_Start_IT>

  init_led();
 8000cd2:	f7ff fccb 	bl	800066c <init_led>
  init_data();
 8000cd6:	f7ff faf3 	bl	80002c0 <init_data>
  set_seg7_led_timer(100);
 8000cda:	2064      	movs	r0, #100	; 0x64
 8000cdc:	f000 fb9e 	bl	800141c <set_seg7_led_timer>
  set_Trafic_Timer(duration);
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <main+0xa0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fb63 	bl	80013b0 <set_Trafic_Timer>
  set_blink_timer(500);
 8000cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cee:	f000 fbcb 	bl	8001488 <set_blink_timer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (change_mode == 1) {
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <main+0xa4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <main+0x50>
		  turn_off_all_led();
 8000cfa:	f7ff ff93 	bl	8000c24 <turn_off_all_led>
		  change_mode_state();
 8000cfe:	f000 fa6b 	bl	80011d8 <change_mode_state>
		  change_mode = 0;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <main+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
	  }
	  if (save_all_change == 1) {
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0xa8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d104      	bne.n	8000d1a <main+0x62>
		  run_set_mode();
 8000d10:	f000 fa8c 	bl	800122c <run_set_mode>
		  save_all_change = 0;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <main+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
	  }
	  if (mode == NORMAL_MODE) {
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <main+0xac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <main+0x70>
		  // TODO run system
		  run_normal_mode();
 8000d22:	f000 f925 	bl	8000f70 <run_normal_mode>
 8000d26:	e7e4      	b.n	8000cf2 <main+0x3a>
	  }
	  else if (mode == ADJUST_RED_LED) {
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <main+0xac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d102      	bne.n	8000d36 <main+0x7e>
		  // TODO adjust red
		  run_adjust_red_mode();
 8000d30:	f000 f9ce 	bl	80010d0 <run_adjust_red_mode>
 8000d34:	e7dd      	b.n	8000cf2 <main+0x3a>
	  }
	  else if (mode == ADJUST_YELLOW_LED) {
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <main+0xac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d102      	bne.n	8000d44 <main+0x8c>
		  // TODO adjust green
		  run_adjust_yellow_mode();
 8000d3e:	f000 fa1f 	bl	8001180 <run_adjust_yellow_mode>
 8000d42:	e7d6      	b.n	8000cf2 <main+0x3a>
	  }
	  else if (mode == ADJUST_GREEN_LED) {
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <main+0xac>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d1d2      	bne.n	8000cf2 <main+0x3a>
		  // TODO adjust yellow
		  run_adjust_green_mode();
 8000d4c:	f000 f9ec 	bl	8001128 <run_adjust_green_mode>
	  if (change_mode == 1) {
 8000d50:	e7cf      	b.n	8000cf2 <main+0x3a>
 8000d52:	bf00      	nop
 8000d54:	200000b8 	.word	0x200000b8
 8000d58:	20000094 	.word	0x20000094
 8000d5c:	20000058 	.word	0x20000058
 8000d60:	20000060 	.word	0x20000060
 8000d64:	20000090 	.word	0x20000090

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 ff04 	bl	8002b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d92:	2310      	movs	r3, #16
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ff00 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000daa:	f000 f8db 	bl	8000f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f96c 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f8c7 	bl	8000f64 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	; 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e14:	2209      	movs	r2, #9
 8000e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e24:	4813      	ldr	r0, [pc, #76]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e26:	f001 faa5 	bl	8002374 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e30:	f000 f898 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e42:	f001 fc3b 	bl	80026bc <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f000 f88a 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e5e:	f001 fe03 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e68:	f000 f87c 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000b8 	.word	0x200000b8

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <MX_GPIO_Init+0xb8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <MX_GPIO_Init+0xb8>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <MX_GPIO_Init+0xb8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <MX_GPIO_Init+0xb8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <MX_GPIO_Init+0xb8>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_GPIO_Init+0xb8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000ec2:	481c      	ldr	r0, [pc, #112]	; (8000f34 <MX_GPIO_Init+0xbc>)
 8000ec4:	f000 fe3d 	bl	8001b42 <HAL_GPIO_WritePin>
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_1_Pin|b_1_Pin|c_1_Pin|d_1_Pin
 8000ec8:	2200      	movs	r2, #0
 8000eca:	217f      	movs	r1, #127	; 0x7f
 8000ecc:	481a      	ldr	r0, [pc, #104]	; (8000f38 <MX_GPIO_Init+0xc0>)
 8000ece:	f000 fe38 	bl	8001b42 <HAL_GPIO_WritePin>
                          |e_1_Pin|f_1_Pin|g_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000ed2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000ed6:	60bb      	str	r3, [r7, #8]
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_GPIO_Init+0xbc>)
 8000eec:	f000 fc98 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_1_Pin b_1_Pin c_1_Pin d_1_Pin
                           e_1_Pin f_1_Pin g_1_Pin */
  GPIO_InitStruct.Pin = a_1_Pin|b_1_Pin|c_1_Pin|d_1_Pin
 8000ef0:	237f      	movs	r3, #127	; 0x7f
 8000ef2:	60bb      	str	r3, [r7, #8]
                          |e_1_Pin|f_1_Pin|g_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2302      	movs	r3, #2
 8000efe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4619      	mov	r1, r3
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_GPIO_Init+0xc0>)
 8000f08:	f000 fc8a 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin INC_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|INC_Pin|SET_Pin;
 8000f0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0xbc>)
 8000f22:	f000 fc7d 	bl	8001820 <HAL_GPIO_Init>

}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	Trafic_Timer_Run();
 8000f44:	f000 fa50 	bl	80013e8 <Trafic_Timer_Run>
	seg7_led_timer_run();
 8000f48:	f000 fa84 	bl	8001454 <seg7_led_timer_run>
	blink_timer_run();
 8000f4c:	f000 fab8 	bl	80014c0 <blink_timer_run>
	get_mode_input();
 8000f50:	f7ff f8fc 	bl	800014c <get_mode_input>
	get_inc_input();
 8000f54:	f7ff f938 	bl	80001c8 <get_inc_input>
	get_set_input();
 8000f58:	f7ff f974 	bl	8000244 <get_set_input>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <run_normal_mode>:
#include "led.h"
#include "timer.h"
#include "global.h"
#include "button.h"

void run_normal_mode() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	  normal_led_buffer();
 8000f74:	f7ff fa1a 	bl	80003ac <normal_led_buffer>
	  scan_seg7_led();
 8000f78:	f7ff fd7a 	bl	8000a70 <scan_seg7_led>
	  if (trafic_flag == 1) {
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <run_normal_mode+0x138>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d123      	bne.n	8000fcc <run_normal_mode+0x5c>
		  if (frequent > 0) {
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <run_normal_mode+0x13c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd1a      	ble.n	8000fc2 <run_normal_mode+0x52>
			  frequent--;
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <run_normal_mode+0x13c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4a46      	ldr	r2, [pc, #280]	; (80010ac <run_normal_mode+0x13c>)
 8000f94:	6013      	str	r3, [r2, #0]
			  if (frequent == 0) {
 8000f96:	4b45      	ldr	r3, [pc, #276]	; (80010ac <run_normal_mode+0x13c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d111      	bne.n	8000fc2 <run_normal_mode+0x52>
				  trafic1_count_down--;
 8000f9e:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <run_normal_mode+0x140>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <run_normal_mode+0x140>)
 8000fa6:	6013      	str	r3, [r2, #0]
				  trafic2_count_down--;
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <run_normal_mode+0x144>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a41      	ldr	r2, [pc, #260]	; (80010b4 <run_normal_mode+0x144>)
 8000fb0:	6013      	str	r3, [r2, #0]
				  frequent = 1000 / duration;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <run_normal_mode+0x148>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fbe:	4a3b      	ldr	r2, [pc, #236]	; (80010ac <run_normal_mode+0x13c>)
 8000fc0:	6013      	str	r3, [r2, #0]
			  }
		  }
		  set_Trafic_Timer(duration);
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <run_normal_mode+0x148>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f9f2 	bl	80013b0 <set_Trafic_Timer>
	  }
	  if (trafic1_count_down == 0 && current_state_trafic1 == RED_STATE) {
 8000fcc:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <run_normal_mode+0x140>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10d      	bne.n	8000ff0 <run_normal_mode+0x80>
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <run_normal_mode+0x14c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d109      	bne.n	8000ff0 <run_normal_mode+0x80>
		  show_green(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fae1 	bl	80005a4 <show_green>
		  trafic1_count_down = green_count_down;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <run_normal_mode+0x150>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <run_normal_mode+0x140>)
 8000fe8:	6013      	str	r3, [r2, #0]
		  current_state_trafic1 = GREEN_STATE;
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <run_normal_mode+0x14c>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	601a      	str	r2, [r3, #0]
	  }
	  if (trafic1_count_down == 0 && current_state_trafic1 == GREEN_STATE) {
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <run_normal_mode+0x140>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10d      	bne.n	8001014 <run_normal_mode+0xa4>
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <run_normal_mode+0x14c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d109      	bne.n	8001014 <run_normal_mode+0xa4>
		  show_yellow(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fb01 	bl	8000608 <show_yellow>
		  trafic1_count_down = yellow_count_down;
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <run_normal_mode+0x154>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <run_normal_mode+0x140>)
 800100c:	6013      	str	r3, [r2, #0]
		  current_state_trafic1 = YELLOW_STATE;
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <run_normal_mode+0x14c>)
 8001010:	2203      	movs	r2, #3
 8001012:	601a      	str	r2, [r3, #0]
	  }
	  if (trafic1_count_down == 0 && current_state_trafic1 == YELLOW_STATE) {
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <run_normal_mode+0x140>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10d      	bne.n	8001038 <run_normal_mode+0xc8>
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <run_normal_mode+0x14c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d109      	bne.n	8001038 <run_normal_mode+0xc8>
		  show_red(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fa8b 	bl	8000540 <show_red>
		  trafic1_count_down = red_count_down;
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <run_normal_mode+0x158>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <run_normal_mode+0x140>)
 8001030:	6013      	str	r3, [r2, #0]
		  current_state_trafic1 = RED_STATE;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <run_normal_mode+0x14c>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
	  }

	  if (trafic2_count_down == 0 && current_state_trafic2 == RED_STATE) {
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <run_normal_mode+0x144>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10d      	bne.n	800105c <run_normal_mode+0xec>
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <run_normal_mode+0x15c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d109      	bne.n	800105c <run_normal_mode+0xec>
		  show_green(2);
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff faab 	bl	80005a4 <show_green>
		  trafic2_count_down = green_count_down;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <run_normal_mode+0x150>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <run_normal_mode+0x144>)
 8001054:	6013      	str	r3, [r2, #0]
		  current_state_trafic2 = GREEN_STATE;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <run_normal_mode+0x15c>)
 8001058:	2202      	movs	r2, #2
 800105a:	601a      	str	r2, [r3, #0]
	  }
	  if (trafic2_count_down == 0 && current_state_trafic2 == GREEN_STATE) {
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <run_normal_mode+0x144>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10d      	bne.n	8001080 <run_normal_mode+0x110>
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <run_normal_mode+0x15c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d109      	bne.n	8001080 <run_normal_mode+0x110>
		  show_yellow(2);
 800106c:	2002      	movs	r0, #2
 800106e:	f7ff facb 	bl	8000608 <show_yellow>
		  trafic2_count_down = yellow_count_down;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <run_normal_mode+0x154>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <run_normal_mode+0x144>)
 8001078:	6013      	str	r3, [r2, #0]
		  current_state_trafic2 = YELLOW_STATE;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <run_normal_mode+0x15c>)
 800107c:	2203      	movs	r2, #3
 800107e:	601a      	str	r2, [r3, #0]
	  }
	  if (trafic2_count_down == 0 && current_state_trafic2 == YELLOW_STATE) {
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <run_normal_mode+0x144>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10d      	bne.n	80010a4 <run_normal_mode+0x134>
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <run_normal_mode+0x15c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d109      	bne.n	80010a4 <run_normal_mode+0x134>
		  show_red(2);
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff fa55 	bl	8000540 <show_red>
		  trafic2_count_down = red_count_down;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <run_normal_mode+0x158>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <run_normal_mode+0x144>)
 800109c:	6013      	str	r3, [r2, #0]
		  current_state_trafic2 = RED_STATE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <run_normal_mode+0x15c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
	  }
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000068 	.word	0x20000068
 80010ac:	20000088 	.word	0x20000088
 80010b0:	2000008c 	.word	0x2000008c
 80010b4:	200000a4 	.word	0x200000a4
 80010b8:	20000094 	.word	0x20000094
 80010bc:	200000a0 	.word	0x200000a0
 80010c0:	200000ac 	.word	0x200000ac
 80010c4:	20000098 	.word	0x20000098
 80010c8:	2000009c 	.word	0x2000009c
 80010cc:	200000a8 	.word	0x200000a8

080010d0 <run_adjust_red_mode>:
void run_adjust_red_mode() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	  adjust_mode_red_led_buffer();
 80010d4:	f7ff f9aa 	bl	800042c <adjust_mode_red_led_buffer>
	  scan_seg7_led();
 80010d8:	f7ff fcca 	bl	8000a70 <scan_seg7_led>
	  if (blink_flag == 1) {
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <run_adjust_red_mode+0x4c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <run_adjust_red_mode+0x20>
		  blink();
 80010e4:	f7ff fdc6 	bl	8000c74 <blink>
		  set_blink_timer(500);
 80010e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ec:	f000 f9cc 	bl	8001488 <set_blink_timer>
	  }
	  if (inc_detect == 1) {
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <run_adjust_red_mode+0x50>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10e      	bne.n	8001116 <run_adjust_red_mode+0x46>
		  red_count_down += 1;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <run_adjust_red_mode+0x54>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <run_adjust_red_mode+0x54>)
 8001100:	6013      	str	r3, [r2, #0]
		  if (red_count_down == 100) {
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <run_adjust_red_mode+0x54>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d102      	bne.n	8001110 <run_adjust_red_mode+0x40>
			  red_count_down = DEFAULT_RED_COUNT_DOWN;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <run_adjust_red_mode+0x54>)
 800110c:	2205      	movs	r2, #5
 800110e:	601a      	str	r2, [r3, #0]
		  }
		  inc_detect = 0;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <run_adjust_red_mode+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	  }
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000b4 	.word	0x200000b4
 8001120:	2000005c 	.word	0x2000005c
 8001124:	2000009c 	.word	0x2000009c

08001128 <run_adjust_green_mode>:
void run_adjust_green_mode() {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	  adjust_mode_green_led_buffer();
 800112c:	f7ff f9da 	bl	80004e4 <adjust_mode_green_led_buffer>
	  scan_seg7_led();
 8001130:	f7ff fc9e 	bl	8000a70 <scan_seg7_led>
	  if (blink_flag == 1) {
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <run_adjust_green_mode+0x4c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <run_adjust_green_mode+0x20>
		  blink();
 800113c:	f7ff fd9a 	bl	8000c74 <blink>
		  set_blink_timer(500);
 8001140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001144:	f000 f9a0 	bl	8001488 <set_blink_timer>
	  }
	  if (inc_detect == 1) {
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <run_adjust_green_mode+0x50>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10e      	bne.n	800116e <run_adjust_green_mode+0x46>
		  green_count_down += 1;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <run_adjust_green_mode+0x54>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <run_adjust_green_mode+0x54>)
 8001158:	6013      	str	r3, [r2, #0]
		  if (green_count_down == 100) {
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <run_adjust_green_mode+0x54>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d102      	bne.n	8001168 <run_adjust_green_mode+0x40>
			  green_count_down = DEFAULT_GREEN_COUNT_DOWN;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <run_adjust_green_mode+0x54>)
 8001164:	2203      	movs	r2, #3
 8001166:	601a      	str	r2, [r3, #0]
		  }
		  inc_detect = 0;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <run_adjust_green_mode+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
	  }
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000b4 	.word	0x200000b4
 8001178:	2000005c 	.word	0x2000005c
 800117c:	200000ac 	.word	0x200000ac

08001180 <run_adjust_yellow_mode>:
void run_adjust_yellow_mode() {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	  adjust_mode_yellow_led_buffer();
 8001184:	f7ff f980 	bl	8000488 <adjust_mode_yellow_led_buffer>
	  scan_seg7_led();
 8001188:	f7ff fc72 	bl	8000a70 <scan_seg7_led>
	  if (blink_flag == 1) {
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <run_adjust_yellow_mode+0x4c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <run_adjust_yellow_mode+0x20>
		  blink();
 8001194:	f7ff fd6e 	bl	8000c74 <blink>
		  set_blink_timer(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f000 f974 	bl	8001488 <set_blink_timer>
	  }
	  if (inc_detect == 1) {
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <run_adjust_yellow_mode+0x50>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d10e      	bne.n	80011c6 <run_adjust_yellow_mode+0x46>
		  yellow_count_down += 1;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <run_adjust_yellow_mode+0x54>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <run_adjust_yellow_mode+0x54>)
 80011b0:	6013      	str	r3, [r2, #0]
		  if (yellow_count_down == 100) {
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <run_adjust_yellow_mode+0x54>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d102      	bne.n	80011c0 <run_adjust_yellow_mode+0x40>
			  yellow_count_down = DEFAULT_YELLOW_COUNT_DOWN;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <run_adjust_yellow_mode+0x54>)
 80011bc:	2202      	movs	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
		  }
		  inc_detect = 0;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <run_adjust_yellow_mode+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
	  }
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000b4 	.word	0x200000b4
 80011d0:	2000005c 	.word	0x2000005c
 80011d4:	20000098 	.word	0x20000098

080011d8 <change_mode_state>:

void change_mode_state() {
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	  switch (mode) {
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <change_mode_state+0x50>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d81a      	bhi.n	800121c <change_mode_state+0x44>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <change_mode_state+0x14>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	080011fd 	.word	0x080011fd
 80011f0:	08001205 	.word	0x08001205
 80011f4:	0800120d 	.word	0x0800120d
 80011f8:	08001215 	.word	0x08001215
	  case NORMAL_MODE:
		  mode = 2;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <change_mode_state+0x50>)
 80011fe:	2202      	movs	r2, #2
 8001200:	601a      	str	r2, [r3, #0]
		  break;
 8001202:	e00c      	b.n	800121e <change_mode_state+0x46>
	  case ADJUST_RED_LED:
	  	  mode = 3;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <change_mode_state+0x50>)
 8001206:	2203      	movs	r2, #3
 8001208:	601a      	str	r2, [r3, #0]
	  	  break;
 800120a:	e008      	b.n	800121e <change_mode_state+0x46>
	  case ADJUST_YELLOW_LED:
		  mode = 4;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <change_mode_state+0x50>)
 800120e:	2204      	movs	r2, #4
 8001210:	601a      	str	r2, [r3, #0]
		  break;
 8001212:	e004      	b.n	800121e <change_mode_state+0x46>
	  case ADJUST_GREEN_LED:
		  mode = 2;
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <change_mode_state+0x50>)
 8001216:	2202      	movs	r2, #2
 8001218:	601a      	str	r2, [r3, #0]
		  break;
 800121a:	e000      	b.n	800121e <change_mode_state+0x46>
	  default:
		  break;
 800121c:	bf00      	nop
	  }
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000090 	.word	0x20000090

0800122c <run_set_mode>:

void run_set_mode() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	  mode = 1;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <run_set_mode+0x48>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
	  current_state_trafic1 = RED_STATE;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <run_set_mode+0x4c>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
	  current_state_trafic2 = GREEN_STATE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <run_set_mode+0x50>)
 800123e:	2202      	movs	r2, #2
 8001240:	601a      	str	r2, [r3, #0]
	  trafic1_count_down = red_count_down;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <run_set_mode+0x54>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <run_set_mode+0x58>)
 8001248:	6013      	str	r3, [r2, #0]
	  trafic2_count_down = green_count_down;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <run_set_mode+0x5c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <run_set_mode+0x60>)
 8001250:	6013      	str	r3, [r2, #0]
	  init_led();
 8001252:	f7ff fa0b 	bl	800066c <init_led>
	  set_seg7_led_timer(100);
 8001256:	2064      	movs	r0, #100	; 0x64
 8001258:	f000 f8e0 	bl	800141c <set_seg7_led_timer>
	  set_Trafic_Timer(duration);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <run_set_mode+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f8a5 	bl	80013b0 <set_Trafic_Timer>
	  set_blink_timer(500);
 8001266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126a:	f000 f90d 	bl	8001488 <set_blink_timer>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000090 	.word	0x20000090
 8001278:	200000a0 	.word	0x200000a0
 800127c:	200000a8 	.word	0x200000a8
 8001280:	2000009c 	.word	0x2000009c
 8001284:	2000008c 	.word	0x2000008c
 8001288:	200000ac 	.word	0x200000ac
 800128c:	200000a4 	.word	0x200000a4
 8001290:	20000094 	.word	0x20000094

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d113      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201c      	movs	r0, #28
 8001328:	f000 fa43 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f000 fa5c 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f921 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM2_IRQHandler+0x10>)
 8001396:	f001 f889 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200000b8 	.word	0x200000b8

080013a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <set_Trafic_Timer>:
trafic_flag = 0;
trafic_counter = 0;
seg7_flag = 0;
seg7_counter = 0;

void set_Trafic_Timer(int duration) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	trafic_counter = duration / TIMER_CYCLE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <set_Trafic_Timer+0x2c>)
 80013bc:	fb82 1203 	smull	r1, r2, r2, r3
 80013c0:	1092      	asrs	r2, r2, #2
 80013c2:	17db      	asrs	r3, r3, #31
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <set_Trafic_Timer+0x30>)
 80013c8:	6013      	str	r3, [r2, #0]
	trafic_flag = 0;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <set_Trafic_Timer+0x34>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	66666667 	.word	0x66666667
 80013e0:	2000006c 	.word	0x2000006c
 80013e4:	20000068 	.word	0x20000068

080013e8 <Trafic_Timer_Run>:

void Trafic_Timer_Run() {
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	if (trafic_counter > 0) {
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <Trafic_Timer_Run+0x2c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd0b      	ble.n	800140c <Trafic_Timer_Run+0x24>
		trafic_counter--;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <Trafic_Timer_Run+0x2c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <Trafic_Timer_Run+0x2c>)
 80013fc:	6013      	str	r3, [r2, #0]
		if (trafic_counter == 0) {
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <Trafic_Timer_Run+0x2c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <Trafic_Timer_Run+0x24>
			trafic_flag = 1;
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <Trafic_Timer_Run+0x30>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	2000006c 	.word	0x2000006c
 8001418:	20000068 	.word	0x20000068

0800141c <set_seg7_led_timer>:

void set_seg7_led_timer(int duration) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	seg7_counter = duration / TIMER_CYCLE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <set_seg7_led_timer+0x2c>)
 8001428:	fb82 1203 	smull	r1, r2, r2, r3
 800142c:	1092      	asrs	r2, r2, #2
 800142e:	17db      	asrs	r3, r3, #31
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <set_seg7_led_timer+0x30>)
 8001434:	6013      	str	r3, [r2, #0]
	seg7_flag = 0;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <set_seg7_led_timer+0x34>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	66666667 	.word	0x66666667
 800144c:	20000074 	.word	0x20000074
 8001450:	20000070 	.word	0x20000070

08001454 <seg7_led_timer_run>:
void seg7_led_timer_run() {
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	if (seg7_counter > 0) {
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <seg7_led_timer_run+0x2c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dd0b      	ble.n	8001478 <seg7_led_timer_run+0x24>
		seg7_counter--;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <seg7_led_timer_run+0x2c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3b01      	subs	r3, #1
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <seg7_led_timer_run+0x2c>)
 8001468:	6013      	str	r3, [r2, #0]
		if (seg7_counter == 0) {
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <seg7_led_timer_run+0x2c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <seg7_led_timer_run+0x24>
			seg7_flag = 1;
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <seg7_led_timer_run+0x30>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000074 	.word	0x20000074
 8001484:	20000070 	.word	0x20000070

08001488 <set_blink_timer>:

void set_blink_timer(int duration) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	blink_counter = duration / TIMER_CYCLE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <set_blink_timer+0x2c>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	1092      	asrs	r2, r2, #2
 800149a:	17db      	asrs	r3, r3, #31
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <set_blink_timer+0x30>)
 80014a0:	6013      	str	r3, [r2, #0]
	blink_flag = 0;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <set_blink_timer+0x34>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	66666667 	.word	0x66666667
 80014b8:	200000b0 	.word	0x200000b0
 80014bc:	200000b4 	.word	0x200000b4

080014c0 <blink_timer_run>:
void blink_timer_run() {
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	if (blink_counter > 0) {
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <blink_timer_run+0x2c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dd0b      	ble.n	80014e4 <blink_timer_run+0x24>
		blink_counter--;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <blink_timer_run+0x2c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <blink_timer_run+0x2c>)
 80014d4:	6013      	str	r3, [r2, #0]
		if (blink_counter == 0) {
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <blink_timer_run+0x2c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <blink_timer_run+0x24>
			blink_flag = 1;
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <blink_timer_run+0x30>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	200000b0 	.word	0x200000b0
 80014f0:	200000b4 	.word	0x200000b4

080014f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800151a:	f7ff ff43 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f001 fb0d 	bl	8002b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001522:	f7ff fbc9 	bl	8000cb8 <main>
  bx lr
 8001526:	4770      	bx	lr
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001530:	08002bd4 	.word	0x08002bd4
  ldr r2, =_sbss
 8001534:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001538:	20000104 	.word	0x20000104

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x28>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x28>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f923 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fe9a 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f93b 	bl	8001806 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f903 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000030 	.word	0x20000030
 80015c4:	20000038 	.word	0x20000038
 80015c8:	20000034 	.word	0x20000034

080015cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_IncTick+0x1c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x20>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_IncTick+0x20>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000038 	.word	0x20000038
 80015ec:	20000100 	.word	0x20000100

080015f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <HAL_GetTick+0x10>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000100 	.word	0x20000100

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <__NVIC_EnableIRQ+0x34>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff90 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff2d 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff42 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff90 	bl	80016f4 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5f 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff35 	bl	8001668 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	; 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	e148      	b.n	8001ac6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001834:	2201      	movs	r2, #1
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8137 	bne.w	8001ac0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4aa3      	ldr	r2, [pc, #652]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d05e      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800185c:	4aa1      	ldr	r2, [pc, #644]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d875      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001862:	4aa1      	ldr	r2, [pc, #644]	; (8001ae8 <HAL_GPIO_Init+0x2c8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d058      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001868:	4a9f      	ldr	r2, [pc, #636]	; (8001ae8 <HAL_GPIO_Init+0x2c8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d86f      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800186e:	4a9f      	ldr	r2, [pc, #636]	; (8001aec <HAL_GPIO_Init+0x2cc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d052      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001874:	4a9d      	ldr	r2, [pc, #628]	; (8001aec <HAL_GPIO_Init+0x2cc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d869      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800187a:	4a9d      	ldr	r2, [pc, #628]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04c      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001880:	4a9b      	ldr	r2, [pc, #620]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d863      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001886:	4a9b      	ldr	r2, [pc, #620]	; (8001af4 <HAL_GPIO_Init+0x2d4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d046      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800188c:	4a99      	ldr	r2, [pc, #612]	; (8001af4 <HAL_GPIO_Init+0x2d4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d85d      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001892:	2b12      	cmp	r3, #18
 8001894:	d82a      	bhi.n	80018ec <HAL_GPIO_Init+0xcc>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d859      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <HAL_GPIO_Init+0x80>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	0800191b 	.word	0x0800191b
 80018a4:	080018f5 	.word	0x080018f5
 80018a8:	08001907 	.word	0x08001907
 80018ac:	08001949 	.word	0x08001949
 80018b0:	0800194f 	.word	0x0800194f
 80018b4:	0800194f 	.word	0x0800194f
 80018b8:	0800194f 	.word	0x0800194f
 80018bc:	0800194f 	.word	0x0800194f
 80018c0:	0800194f 	.word	0x0800194f
 80018c4:	0800194f 	.word	0x0800194f
 80018c8:	0800194f 	.word	0x0800194f
 80018cc:	0800194f 	.word	0x0800194f
 80018d0:	0800194f 	.word	0x0800194f
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	0800194f 	.word	0x0800194f
 80018dc:	0800194f 	.word	0x0800194f
 80018e0:	0800194f 	.word	0x0800194f
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001911 	.word	0x08001911
 80018ec:	4a82      	ldr	r2, [pc, #520]	; (8001af8 <HAL_GPIO_Init+0x2d8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f2:	e02c      	b.n	800194e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e029      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	3304      	adds	r3, #4
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e024      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	3308      	adds	r3, #8
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e01f      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	330c      	adds	r3, #12
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e01a      	b.n	8001950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001922:	2304      	movs	r3, #4
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e013      	b.n	8001950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	611a      	str	r2, [r3, #16]
          break;
 800193a:	e009      	b.n	8001950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800193c:	2308      	movs	r3, #8
 800193e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	615a      	str	r2, [r3, #20]
          break;
 8001946:	e003      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x130>
          break;
 800194e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	d801      	bhi.n	800195a <HAL_GPIO_Init+0x13a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	e001      	b.n	800195e <HAL_GPIO_Init+0x13e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d802      	bhi.n	800196c <HAL_GPIO_Init+0x14c>
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x152>
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3b08      	subs	r3, #8
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	210f      	movs	r1, #15
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8090 	beq.w	8001ac0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a0:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x2dc>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a55      	ldr	r2, [pc, #340]	; (8001afc <HAL_GPIO_Init+0x2dc>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_GPIO_Init+0x2dc>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_GPIO_Init+0x2e0>)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1e0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1dc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a47      	ldr	r2, [pc, #284]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1d8>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1e2>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1e2>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1e2>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a12:	493b      	ldr	r1, [pc, #236]	; (8001b00 <HAL_GPIO_Init+0x2e0>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4937      	ldr	r1, [pc, #220]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4933      	ldr	r1, [pc, #204]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	492d      	ldr	r1, [pc, #180]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4929      	ldr	r1, [pc, #164]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4923      	ldr	r1, [pc, #140]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491f      	ldr	r1, [pc, #124]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4919      	ldr	r1, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4915      	ldr	r1, [pc, #84]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f aeaf 	bne.w	8001834 <HAL_GPIO_Init+0x14>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	372c      	adds	r7, #44	; 0x2c
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	10320000 	.word	0x10320000
 8001ae8:	10310000 	.word	0x10310000
 8001aec:	10220000 	.word	0x10220000
 8001af0:	10210000 	.word	0x10210000
 8001af4:	10120000 	.word	0x10120000
 8001af8:	10110000 	.word	0x10110000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e001      	b.n	8001b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b52:	787b      	ldrb	r3, [r7, #1]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b58:	887a      	ldrh	r2, [r7, #2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b5e:	e003      	b.n	8001b68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	041a      	lsls	r2, r3, #16
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	400b      	ands	r3, r1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e26c      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd0:	4b8f      	ldr	r3, [pc, #572]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
 8001bdc:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e246      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x76>
 8001c0c:	4b80      	ldr	r3, [pc, #512]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7f      	ldr	r2, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x98>
 8001c22:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b78      	ldr	r3, [pc, #480]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a77      	ldr	r2, [pc, #476]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xbc>
 8001c46:	4b72      	ldr	r3, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a71      	ldr	r2, [pc, #452]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c60:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6a      	ldr	r2, [pc, #424]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fcb6 	bl	80015f0 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fcb2 	bl	80015f0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1fa      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe4>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fca2 	bl	80015f0 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc9e 	bl	80015f0 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1e6      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x10c>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1ba      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4939      	ldr	r1, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fc57 	bl	80015f0 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fc53 	bl	80015f0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e19b      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4927      	ldr	r1, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc36 	bl	80015f0 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fc32 	bl	80015f0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e17a      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d019      	beq.n	8001dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fc16 	bl	80015f0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc12 	bl	80015f0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e15a      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 faa6 	bl	8002338 <RCC_Delay>
 8001dec:	e01c      	b.n	8001e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fbfc 	bl	80015f0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfa:	e00f      	b.n	8001e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fbf8 	bl	80015f0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d908      	bls.n	8001e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e140      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	42420000 	.word	0x42420000
 8001e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b9e      	ldr	r3, [pc, #632]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e9      	bne.n	8001dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a6 	beq.w	8001f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b97      	ldr	r3, [pc, #604]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b94      	ldr	r3, [pc, #592]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a93      	ldr	r2, [pc, #588]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b91      	ldr	r3, [pc, #580]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b8e      	ldr	r3, [pc, #568]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b8b      	ldr	r3, [pc, #556]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a8a      	ldr	r2, [pc, #552]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fbb9 	bl	80015f0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fbb5 	bl	80015f0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b64      	cmp	r3, #100	; 0x64
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0fd      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x312>
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x334>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a72      	ldr	r2, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x356>
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a6c      	ldr	r2, [pc, #432]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a69      	ldr	r2, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b64      	ldr	r3, [pc, #400]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a63      	ldr	r2, [pc, #396]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fb69 	bl	80015f0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fb65 	bl	80015f0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ab      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x37e>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb53 	bl	80015f0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fb4f 	bl	80015f0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e095      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b48      	ldr	r3, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a47      	ldr	r2, [pc, #284]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8081 	beq.w	800208e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d061      	beq.n	800205c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d146      	bne.n	800202e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x4fc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fb23 	bl	80015f0 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fb1f 	bl	80015f0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e067      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	492d      	ldr	r1, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a19      	ldr	r1, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	4927      	ldr	r1, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x4fc>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff faf3 	bl	80015f0 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff faef 	bl	80015f0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e037      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x46a>
 800202c:	e02f      	b.n	800208e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_RCC_OscConfig+0x4fc>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fadc 	bl	80015f0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fad8 	bl	80015f0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e020      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x498>
 800205a:	e018      	b.n	800208e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e013      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	42420060 	.word	0x42420060

080020a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d0      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4965      	ldr	r1, [pc, #404]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b8      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002100:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a58      	ldr	r2, [pc, #352]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800210a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002118:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	494d      	ldr	r1, [pc, #308]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e07f      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e073      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06b      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4936      	ldr	r1, [pc, #216]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7ff fa2c 	bl	80015f0 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7ff fa28 	bl	80015f0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e053      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d210      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4922      	ldr	r1, [pc, #136]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e032      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4916      	ldr	r1, [pc, #88]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	490e      	ldr	r1, [pc, #56]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002232:	f000 f821 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002236:	4602      	mov	r2, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1cc>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1d0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f98a 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	08002bbc 	.word	0x08002bbc
 8002270:	20000030 	.word	0x20000030
 8002274:	20000034 	.word	0x20000034

08002278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b490      	push	{r4, r7}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002280:	1d3c      	adds	r4, r7, #4
 8002282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002288:	f240 2301 	movw	r3, #513	; 0x201
 800228c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x40>
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x46>
 80022b6:	e02d      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ba:	623b      	str	r3, [r7, #32]
      break;
 80022bc:	e02d      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ca:	4413      	add	r3, r2
 80022cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0c5b      	lsrs	r3, r3, #17
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ea:	4413      	add	r3, r2
 80022ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f6:	fb02 f203 	mul.w	r2, r2, r3
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	e004      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	623b      	str	r3, [r7, #32]
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002316:	623b      	str	r3, [r7, #32]
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	6a3b      	ldr	r3, [r7, #32]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bc90      	pop	{r4, r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	08002bac 	.word	0x08002bac
 800232c:	40021000 	.word	0x40021000
 8002330:	007a1200 	.word	0x007a1200
 8002334:	003d0900 	.word	0x003d0900

08002338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCC_Delay+0x34>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <RCC_Delay+0x38>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002354:	bf00      	nop
  }
  while (Delay --);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60fa      	str	r2, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <RCC_Delay+0x1c>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000030 	.word	0x20000030
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e041      	b.n	800240a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe ffac 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 fa6a 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e035      	b.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIM_Base_Start_IT+0x90>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_TIM_Base_Start_IT+0x4e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002456:	d004      	beq.n	8002462 <HAL_TIM_Base_Start_IT+0x4e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_TIM_Base_Start_IT+0x94>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d111      	bne.n	8002486 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d010      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	e007      	b.n	8002496 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9b1 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f9a4 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f9b3 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f987 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f97a 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f989 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f95d 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f950 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f95f 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f933 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f926 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f935 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fc86 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa67 	bl	8002b2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8f9 	bl	800287a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b20      	cmp	r3, #32
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0220 	mvn.w	r2, #32
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa32 	bl	8002b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_ConfigClockSource+0x18>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0b3      	b.n	800283c <HAL_TIM_ConfigClockSource+0x180>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270c:	d03e      	beq.n	800278c <HAL_TIM_ConfigClockSource+0xd0>
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	f200 8087 	bhi.w	8002824 <HAL_TIM_ConfigClockSource+0x168>
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271a:	f000 8085 	beq.w	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	d87f      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 8002724:	2b70      	cmp	r3, #112	; 0x70
 8002726:	d01a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0xa2>
 8002728:	2b70      	cmp	r3, #112	; 0x70
 800272a:	d87b      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 800272c:	2b60      	cmp	r3, #96	; 0x60
 800272e:	d050      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x116>
 8002730:	2b60      	cmp	r3, #96	; 0x60
 8002732:	d877      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 8002734:	2b50      	cmp	r3, #80	; 0x50
 8002736:	d03c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0xf6>
 8002738:	2b50      	cmp	r3, #80	; 0x50
 800273a:	d873      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d058      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x136>
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d86f      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 8002744:	2b30      	cmp	r3, #48	; 0x30
 8002746:	d064      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x156>
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d86b      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d060      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x156>
 8002750:	2b20      	cmp	r3, #32
 8002752:	d867      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05c      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x156>
 8002758:	2b10      	cmp	r3, #16
 800275a:	d05a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800275c:	e062      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f000 f95c 	bl	8002a2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002780:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
      break;
 800278a:	e04e      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f000 f945 	bl	8002a2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ae:	609a      	str	r2, [r3, #8]
      break;
 80027b0:	e03b      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f8bc 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2150      	movs	r1, #80	; 0x50
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f913 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e02b      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f8da 	bl	8002998 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2160      	movs	r1, #96	; 0x60
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f903 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e01b      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	461a      	mov	r2, r3
 8002800:	f000 f89c 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f8f3 	bl	80029f6 <TIM_ITRx_SetConfig>
      break;
 8002810:	e00b      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f000 f8ea 	bl	80029f6 <TIM_ITRx_SetConfig>
        break;
 8002822:	e002      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002828:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a25      	ldr	r2, [pc, #148]	; (8002934 <TIM_Base_SetConfig+0xa8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <TIM_Base_SetConfig+0x28>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d003      	beq.n	80028b4 <TIM_Base_SetConfig+0x28>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <TIM_Base_SetConfig+0xac>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <TIM_Base_SetConfig+0xa8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a17      	ldr	r2, [pc, #92]	; (8002938 <TIM_Base_SetConfig+0xac>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <TIM_Base_SetConfig+0xa8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d103      	bne.n	8002924 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	615a      	str	r2, [r3, #20]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400

0800293c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0201 	bic.w	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 030a 	bic.w	r3, r3, #10
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 0210 	bic.w	r2, r3, #16
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	621a      	str	r2, [r3, #32]
}
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f043 0307 	orr.w	r3, r3, #7
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b087      	sub	sp, #28
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	021a      	lsls	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	609a      	str	r2, [r3, #8]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e041      	b.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10c      	bne.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40000400 	.word	0x40000400

08002b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <__libc_init_array>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	2600      	movs	r6, #0
 8002b40:	4d0c      	ldr	r5, [pc, #48]	; (8002b74 <__libc_init_array+0x38>)
 8002b42:	4c0d      	ldr	r4, [pc, #52]	; (8002b78 <__libc_init_array+0x3c>)
 8002b44:	1b64      	subs	r4, r4, r5
 8002b46:	10a4      	asrs	r4, r4, #2
 8002b48:	42a6      	cmp	r6, r4
 8002b4a:	d109      	bne.n	8002b60 <__libc_init_array+0x24>
 8002b4c:	f000 f822 	bl	8002b94 <_init>
 8002b50:	2600      	movs	r6, #0
 8002b52:	4d0a      	ldr	r5, [pc, #40]	; (8002b7c <__libc_init_array+0x40>)
 8002b54:	4c0a      	ldr	r4, [pc, #40]	; (8002b80 <__libc_init_array+0x44>)
 8002b56:	1b64      	subs	r4, r4, r5
 8002b58:	10a4      	asrs	r4, r4, #2
 8002b5a:	42a6      	cmp	r6, r4
 8002b5c:	d105      	bne.n	8002b6a <__libc_init_array+0x2e>
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b64:	4798      	blx	r3
 8002b66:	3601      	adds	r6, #1
 8002b68:	e7ee      	b.n	8002b48 <__libc_init_array+0xc>
 8002b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6e:	4798      	blx	r3
 8002b70:	3601      	adds	r6, #1
 8002b72:	e7f2      	b.n	8002b5a <__libc_init_array+0x1e>
 8002b74:	08002bcc 	.word	0x08002bcc
 8002b78:	08002bcc 	.word	0x08002bcc
 8002b7c:	08002bcc 	.word	0x08002bcc
 8002b80:	08002bd0 	.word	0x08002bd0

08002b84 <memset>:
 8002b84:	4603      	mov	r3, r0
 8002b86:	4402      	add	r2, r0
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <memset+0xa>
 8002b8c:	4770      	bx	lr
 8002b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b92:	e7f9      	b.n	8002b88 <memset+0x4>

08002b94 <_init>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr

08002ba0 <_fini>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr
