
sources.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aec  08002aec  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002aec  08002aec  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aec  08002aec  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000040  08002b34  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002b34  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ed5  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001816  00000000  00000000  00028f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166b8  00000000  00000000  0002bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a45d  00000000  00000000  00042178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082218  00000000  00000000  0004c5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce7ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000ce840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ab4 	.word	0x08002ab4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002ab4 	.word	0x08002ab4

0800014c <get_mode_input>:

int mode_reg_3 = NORMAL_STATE;

change_mode = 0;

void get_mode_input() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	mode_reg_0 = mode_reg_1;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <get_mode_input+0x64>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <get_mode_input+0x68>)
 8000156:	6013      	str	r3, [r2, #0]
	mode_reg_1 = mode_reg_2;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <get_mode_input+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a14      	ldr	r2, [pc, #80]	; (80001b0 <get_mode_input+0x64>)
 800015e:	6013      	str	r3, [r2, #0]
	mode_reg_2 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000164:	4815      	ldr	r0, [pc, #84]	; (80001bc <get_mode_input+0x70>)
 8000166:	f001 fc65 	bl	8001a34 <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	461a      	mov	r2, r3
 800016e:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <get_mode_input+0x6c>)
 8000170:	601a      	str	r2, [r3, #0]
	if ((mode_reg_0 == mode_reg_1) && (mode_reg_1 == mode_reg_2)) {
 8000172:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <get_mode_input+0x68>)
 8000174:	681a      	ldr	r2, [r3, #0]
 8000176:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <get_mode_input+0x64>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	429a      	cmp	r2, r3
 800017c:	d116      	bne.n	80001ac <get_mode_input+0x60>
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <get_mode_input+0x64>)
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <get_mode_input+0x6c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	429a      	cmp	r2, r3
 8000188:	d110      	bne.n	80001ac <get_mode_input+0x60>
		if (mode_reg_3 != mode_reg_2) {
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <get_mode_input+0x74>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <get_mode_input+0x6c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d00a      	beq.n	80001ac <get_mode_input+0x60>
			mode_reg_3 = mode_reg_2;
 8000196:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <get_mode_input+0x6c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <get_mode_input+0x74>)
 800019c:	6013      	str	r3, [r2, #0]
			if (mode_reg_2 == PRESSED_STATE) {
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <get_mode_input+0x6c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d102      	bne.n	80001ac <get_mode_input+0x60>
				// TODO change mode
				change_mode = 1;
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <get_mode_input+0x78>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000008 	.word	0x20000008
 80001bc:	40010800 	.word	0x40010800
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	2000005c 	.word	0x2000005c

080001c8 <get_inc_input>:

int inc_reg_3 = NORMAL_STATE;

inc_detect = 0;

void get_inc_input() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	inc_reg_0 = inc_reg_1;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <get_inc_input+0x64>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <get_inc_input+0x68>)
 80001d2:	6013      	str	r3, [r2, #0]
	inc_reg_1 = inc_reg_2;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <get_inc_input+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a14      	ldr	r2, [pc, #80]	; (800022c <get_inc_input+0x64>)
 80001da:	6013      	str	r3, [r2, #0]
	inc_reg_2 = HAL_GPIO_ReadPin(GPIOA, INC_Pin);
 80001dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e0:	4815      	ldr	r0, [pc, #84]	; (8000238 <get_inc_input+0x70>)
 80001e2:	f001 fc27 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <get_inc_input+0x6c>)
 80001ec:	601a      	str	r2, [r3, #0]
	if ((inc_reg_0 == inc_reg_1) && (inc_reg_1 == inc_reg_2)) {
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <get_inc_input+0x68>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <get_inc_input+0x64>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d116      	bne.n	8000228 <get_inc_input+0x60>
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <get_inc_input+0x64>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <get_inc_input+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d110      	bne.n	8000228 <get_inc_input+0x60>
		if (inc_reg_3 != inc_reg_2) {
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <get_inc_input+0x74>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <get_inc_input+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	429a      	cmp	r2, r3
 8000210:	d00a      	beq.n	8000228 <get_inc_input+0x60>
			inc_reg_3 = inc_reg_2;
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <get_inc_input+0x6c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a09      	ldr	r2, [pc, #36]	; (800023c <get_inc_input+0x74>)
 8000218:	6013      	str	r3, [r2, #0]
			if (inc_reg_2 == PRESSED_STATE) {
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <get_inc_input+0x6c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d102      	bne.n	8000228 <get_inc_input+0x60>
				// TODO
				inc_detect = 1;
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <get_inc_input+0x78>)
 8000224:	2201      	movs	r2, #1
 8000226:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000014 	.word	0x20000014
 8000230:	20000010 	.word	0x20000010
 8000234:	20000018 	.word	0x20000018
 8000238:	40010800 	.word	0x40010800
 800023c:	2000001c 	.word	0x2000001c
 8000240:	20000060 	.word	0x20000060

08000244 <get_set_input>:

int set_reg_3 = NORMAL_STATE;

save_all_change = 0;

void get_set_input() {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	set_reg_0 = set_reg_1;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <get_set_input+0x64>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <get_set_input+0x68>)
 800024e:	6013      	str	r3, [r2, #0]
	set_reg_1 = set_reg_2;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <get_set_input+0x6c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <get_set_input+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
	set_reg_2 = HAL_GPIO_ReadPin(GPIOA, SET_Pin);
 8000258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025c:	4815      	ldr	r0, [pc, #84]	; (80002b4 <get_set_input+0x70>)
 800025e:	f001 fbe9 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	461a      	mov	r2, r3
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <get_set_input+0x6c>)
 8000268:	601a      	str	r2, [r3, #0]
	if ((set_reg_0 == set_reg_1) && (set_reg_1 == set_reg_2)) {
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <get_set_input+0x68>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <get_set_input+0x64>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	429a      	cmp	r2, r3
 8000274:	d116      	bne.n	80002a4 <get_set_input+0x60>
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <get_set_input+0x64>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <get_set_input+0x6c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	429a      	cmp	r2, r3
 8000280:	d110      	bne.n	80002a4 <get_set_input+0x60>
		if (set_reg_3 != set_reg_2) {
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <get_set_input+0x74>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <get_set_input+0x6c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	429a      	cmp	r2, r3
 800028c:	d00a      	beq.n	80002a4 <get_set_input+0x60>
			set_reg_3 = set_reg_2;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <get_set_input+0x6c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <get_set_input+0x74>)
 8000294:	6013      	str	r3, [r2, #0]
			if (set_reg_2 == PRESSED_STATE) {
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <get_set_input+0x6c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d102      	bne.n	80002a4 <get_set_input+0x60>
				// TODO
				save_all_change = 1;
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <get_set_input+0x78>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000024 	.word	0x20000024
 80002ac:	20000020 	.word	0x20000020
 80002b0:	20000028 	.word	0x20000028
 80002b4:	40010800 	.word	0x40010800
 80002b8:	2000002c 	.word	0x2000002c
 80002bc:	20000064 	.word	0x20000064

080002c0 <normal_led_buffer>:
#include "led.h"
#include "timer.h"
#include "main.h"
seg7_led_order = 0;

void normal_led_buffer() {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = trafic1_count_down / 10;
 80002c4:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <normal_led_buffer+0x70>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <normal_led_buffer+0x74>)
 80002ca:	fb82 1203 	smull	r1, r2, r2, r3
 80002ce:	1092      	asrs	r2, r2, #2
 80002d0:	17db      	asrs	r3, r3, #31
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <normal_led_buffer+0x78>)
 80002d6:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = trafic1_count_down % 10;
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <normal_led_buffer+0x70>)
 80002da:	6819      	ldr	r1, [r3, #0]
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <normal_led_buffer+0x74>)
 80002de:	fb83 2301 	smull	r2, r3, r3, r1
 80002e2:	109a      	asrs	r2, r3, #2
 80002e4:	17cb      	asrs	r3, r1, #31
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	4613      	mov	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	1aca      	subs	r2, r1, r3
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <normal_led_buffer+0x78>)
 80002f4:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = trafic2_count_down / 10;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <normal_led_buffer+0x7c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <normal_led_buffer+0x74>)
 80002fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000300:	1092      	asrs	r2, r2, #2
 8000302:	17db      	asrs	r3, r3, #31
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <normal_led_buffer+0x78>)
 8000308:	6093      	str	r3, [r2, #8]
	  seg7_led_buffer[3] = trafic2_count_down % 10;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <normal_led_buffer+0x7c>)
 800030c:	6819      	ldr	r1, [r3, #0]
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <normal_led_buffer+0x74>)
 8000310:	fb83 2301 	smull	r2, r3, r3, r1
 8000314:	109a      	asrs	r2, r3, #2
 8000316:	17cb      	asrs	r3, r1, #31
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	1aca      	subs	r2, r1, r3
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <normal_led_buffer+0x78>)
 8000326:	60da      	str	r2, [r3, #12]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	2000007c 	.word	0x2000007c
 8000334:	66666667 	.word	0x66666667
 8000338:	20000098 	.word	0x20000098
 800033c:	2000008c 	.word	0x2000008c

08000340 <adjust_mode_red_led_buffer>:

void adjust_mode_red_led_buffer() {
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = red_count_down / 10;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <adjust_mode_red_led_buffer+0x4c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a11      	ldr	r2, [pc, #68]	; (8000390 <adjust_mode_red_led_buffer+0x50>)
 800034a:	fb82 1203 	smull	r1, r2, r2, r3
 800034e:	1092      	asrs	r2, r2, #2
 8000350:	17db      	asrs	r3, r3, #31
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <adjust_mode_red_led_buffer+0x54>)
 8000356:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = red_count_down % 10;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <adjust_mode_red_led_buffer+0x4c>)
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <adjust_mode_red_led_buffer+0x50>)
 800035e:	fb83 2301 	smull	r2, r3, r3, r1
 8000362:	109a      	asrs	r2, r3, #2
 8000364:	17cb      	asrs	r3, r1, #31
 8000366:	1ad2      	subs	r2, r2, r3
 8000368:	4613      	mov	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	1aca      	subs	r2, r1, r3
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <adjust_mode_red_led_buffer+0x54>)
 8000374:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = 0;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <adjust_mode_red_led_buffer+0x54>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
	  seg7_led_buffer[3] = mode;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <adjust_mode_red_led_buffer+0x58>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <adjust_mode_red_led_buffer+0x54>)
 8000382:	60d3      	str	r3, [r2, #12]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	20000084 	.word	0x20000084
 8000390:	66666667 	.word	0x66666667
 8000394:	20000098 	.word	0x20000098
 8000398:	20000030 	.word	0x20000030

0800039c <adjust_mode_yellow_led_buffer>:

void adjust_mode_yellow_led_buffer() {
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = yellow_count_down / 10;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <adjust_mode_yellow_led_buffer+0x4c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <adjust_mode_yellow_led_buffer+0x50>)
 80003a6:	fb82 1203 	smull	r1, r2, r2, r3
 80003aa:	1092      	asrs	r2, r2, #2
 80003ac:	17db      	asrs	r3, r3, #31
 80003ae:	1ad3      	subs	r3, r2, r3
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <adjust_mode_yellow_led_buffer+0x54>)
 80003b2:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = yellow_count_down % 10;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <adjust_mode_yellow_led_buffer+0x4c>)
 80003b6:	6819      	ldr	r1, [r3, #0]
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <adjust_mode_yellow_led_buffer+0x50>)
 80003ba:	fb83 2301 	smull	r2, r3, r3, r1
 80003be:	109a      	asrs	r2, r3, #2
 80003c0:	17cb      	asrs	r3, r1, #31
 80003c2:	1ad2      	subs	r2, r2, r3
 80003c4:	4613      	mov	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	4413      	add	r3, r2
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	1aca      	subs	r2, r1, r3
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <adjust_mode_yellow_led_buffer+0x54>)
 80003d0:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = 0;
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <adjust_mode_yellow_led_buffer+0x54>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
	  seg7_led_buffer[3] = mode;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <adjust_mode_yellow_led_buffer+0x58>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <adjust_mode_yellow_led_buffer+0x54>)
 80003de:	60d3      	str	r3, [r2, #12]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	20000080 	.word	0x20000080
 80003ec:	66666667 	.word	0x66666667
 80003f0:	20000098 	.word	0x20000098
 80003f4:	20000030 	.word	0x20000030

080003f8 <adjust_mode_green_led_buffer>:

void adjust_mode_green_led_buffer() {
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	  seg7_led_buffer[0] = green_count_down / 10;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <adjust_mode_green_led_buffer+0x4c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a11      	ldr	r2, [pc, #68]	; (8000448 <adjust_mode_green_led_buffer+0x50>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	1092      	asrs	r2, r2, #2
 8000408:	17db      	asrs	r3, r3, #31
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	4a0f      	ldr	r2, [pc, #60]	; (800044c <adjust_mode_green_led_buffer+0x54>)
 800040e:	6013      	str	r3, [r2, #0]
	  seg7_led_buffer[1] = green_count_down % 10;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <adjust_mode_green_led_buffer+0x4c>)
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <adjust_mode_green_led_buffer+0x50>)
 8000416:	fb83 2301 	smull	r2, r3, r3, r1
 800041a:	109a      	asrs	r2, r3, #2
 800041c:	17cb      	asrs	r3, r1, #31
 800041e:	1ad2      	subs	r2, r2, r3
 8000420:	4613      	mov	r3, r2
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	1aca      	subs	r2, r1, r3
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <adjust_mode_green_led_buffer+0x54>)
 800042c:	605a      	str	r2, [r3, #4]
	  seg7_led_buffer[2] = 0;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <adjust_mode_green_led_buffer+0x54>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
	  seg7_led_buffer[3] = mode;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <adjust_mode_green_led_buffer+0x58>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <adjust_mode_green_led_buffer+0x54>)
 800043a:	60d3      	str	r3, [r2, #12]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	20000094 	.word	0x20000094
 8000448:	66666667 	.word	0x66666667
 800044c:	20000098 	.word	0x20000098
 8000450:	20000030 	.word	0x20000030

08000454 <show_red>:

void show_red(int road) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	if (road == 1) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d10f      	bne.n	8000482 <show_red+0x2e>
		  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	4813      	ldr	r0, [pc, #76]	; (80004b4 <show_red+0x60>)
 8000468:	f001 fafb 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	4810      	ldr	r0, [pc, #64]	; (80004b4 <show_red+0x60>)
 8000472:	f001 faf6 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	480e      	ldr	r0, [pc, #56]	; (80004b4 <show_red+0x60>)
 800047c:	f001 faf1 	bl	8001a62 <HAL_GPIO_WritePin>
	} else if (road == 2) {
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
	}
}
 8000480:	e014      	b.n	80004ac <show_red+0x58>
	} else if (road == 2) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d111      	bne.n	80004ac <show_red+0x58>
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048e:	4809      	ldr	r0, [pc, #36]	; (80004b4 <show_red+0x60>)
 8000490:	f001 fae7 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <show_red+0x60>)
 800049c:	f001 fae1 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a6:	4803      	ldr	r0, [pc, #12]	; (80004b4 <show_red+0x60>)
 80004a8:	f001 fadb 	bl	8001a62 <HAL_GPIO_WritePin>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40010800 	.word	0x40010800

080004b8 <show_green>:
void show_green(int road) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if (road == 1) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d10f      	bne.n	80004e6 <show_green+0x2e>
		  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2120      	movs	r1, #32
 80004ca:	4813      	ldr	r0, [pc, #76]	; (8000518 <show_green+0x60>)
 80004cc:	f001 fac9 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	4810      	ldr	r0, [pc, #64]	; (8000518 <show_green+0x60>)
 80004d6:	f001 fac4 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	480e      	ldr	r0, [pc, #56]	; (8000518 <show_green+0x60>)
 80004e0:	f001 fabf 	bl	8001a62 <HAL_GPIO_WritePin>
	} else if (road == 2) {
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
	}
}
 80004e4:	e014      	b.n	8000510 <show_green+0x58>
	} else if (road == 2) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d111      	bne.n	8000510 <show_green+0x58>
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <show_green+0x60>)
 80004f4:	f001 fab5 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <show_green+0x60>)
 8000500:	f001 faaf 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <show_green+0x60>)
 800050c:	f001 faa9 	bl	8001a62 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40010800 	.word	0x40010800

0800051c <show_yellow>:
void show_yellow(int road) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if (road == 1) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10f      	bne.n	800054a <show_yellow+0x2e>
		  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2120      	movs	r1, #32
 800052e:	4813      	ldr	r0, [pc, #76]	; (800057c <show_yellow+0x60>)
 8000530:	f001 fa97 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	4810      	ldr	r0, [pc, #64]	; (800057c <show_yellow+0x60>)
 800053a:	f001 fa92 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <show_yellow+0x60>)
 8000544:	f001 fa8d 	bl	8001a62 <HAL_GPIO_WritePin>
	} else if (road == 2) {
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
	}
}
 8000548:	e014      	b.n	8000574 <show_yellow+0x58>
	} else if (road == 2) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d111      	bne.n	8000574 <show_yellow+0x58>
		  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <show_yellow+0x60>)
 8000558:	f001 fa83 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <show_yellow+0x60>)
 8000564:	f001 fa7d 	bl	8001a62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <show_yellow+0x60>)
 8000570:	f001 fa77 	bl	8001a62 <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40010800 	.word	0x40010800

08000580 <init_led>:

void init_led() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <init_led+0x4c>)
 800058a:	f001 fa6a 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <init_led+0x4c>)
 8000594:	f001 fa65 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <init_led+0x4c>)
 800059e:	f001 fa60 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <init_led+0x4c>)
 80005aa:	f001 fa5a 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <init_led+0x4c>)
 80005b6:	f001 fa54 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <init_led+0x4c>)
 80005c2:	f001 fa4e 	bl	8001a62 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010800 	.word	0x40010800

080005d0 <display7SEG>:

void display7SEG(int num, GPIO_TypeDef * GPIO_TYPE, uint16_t a_Pin, uint16_t b_Pin, uint16_t c_Pin, uint16_t d_Pin, uint16_t e_Pin, uint16_t f_Pin, uint16_t g_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4611      	mov	r1, r2
 80005dc:	461a      	mov	r2, r3
 80005de:	460b      	mov	r3, r1
 80005e0:	80fb      	strh	r3, [r7, #6]
 80005e2:	4613      	mov	r3, r2
 80005e4:	80bb      	strh	r3, [r7, #4]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	f200 81c5 	bhi.w	8000978 <display7SEG+0x3a8>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <display7SEG+0x24>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	0800061d 	.word	0x0800061d
 80005f8:	08000673 	.word	0x08000673
 80005fc:	080006c9 	.word	0x080006c9
 8000600:	0800071f 	.word	0x0800071f
 8000604:	08000775 	.word	0x08000775
 8000608:	080007cb 	.word	0x080007cb
 800060c:	08000821 	.word	0x08000821
 8000610:	08000877 	.word	0x08000877
 8000614:	080008cd 	.word	0x080008cd
 8000618:	08000923 	.word	0x08000923
	switch (num){
		case 0:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	2200      	movs	r2, #0
 8000620:	4619      	mov	r1, r3
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f001 fa1d 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 8000628:	88bb      	ldrh	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	68b8      	ldr	r0, [r7, #8]
 8000630:	f001 fa17 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000634:	8b3b      	ldrh	r3, [r7, #24]
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f001 fa11 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 8000640:	8bbb      	ldrh	r3, [r7, #28]
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	68b8      	ldr	r0, [r7, #8]
 8000648:	f001 fa0b 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 800064c:	8c3b      	ldrh	r3, [r7, #32]
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	68b8      	ldr	r0, [r7, #8]
 8000654:	f001 fa05 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 8000658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	68b8      	ldr	r0, [r7, #8]
 8000660:	f001 f9ff 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_SET);
 8000664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	68b8      	ldr	r0, [r7, #8]
 800066c:	f001 f9f9 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 8000670:	e183      	b.n	800097a <display7SEG+0x3aa>
		case 1:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_SET);
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	68b8      	ldr	r0, [r7, #8]
 800067a:	f001 f9f2 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 800067e:	88bb      	ldrh	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	68b8      	ldr	r0, [r7, #8]
 8000686:	f001 f9ec 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 800068a:	8b3b      	ldrh	r3, [r7, #24]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	68b8      	ldr	r0, [r7, #8]
 8000692:	f001 f9e6 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_SET);
 8000696:	8bbb      	ldrh	r3, [r7, #28]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f001 f9e0 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 80006a2:	8c3b      	ldrh	r3, [r7, #32]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	68b8      	ldr	r0, [r7, #8]
 80006aa:	f001 f9da 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 80006ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	68b8      	ldr	r0, [r7, #8]
 80006b6:	f001 f9d4 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_SET);
 80006ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006bc:	2201      	movs	r2, #1
 80006be:	4619      	mov	r1, r3
 80006c0:	68b8      	ldr	r0, [r7, #8]
 80006c2:	f001 f9ce 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 80006c6:	e158      	b.n	800097a <display7SEG+0x3aa>
		case 2:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	68b8      	ldr	r0, [r7, #8]
 80006d0:	f001 f9c7 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	68b8      	ldr	r0, [r7, #8]
 80006dc:	f001 f9c1 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_SET);
 80006e0:	8b3b      	ldrh	r3, [r7, #24]
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	68b8      	ldr	r0, [r7, #8]
 80006e8:	f001 f9bb 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 80006ec:	8bbb      	ldrh	r3, [r7, #28]
 80006ee:	2200      	movs	r2, #0
 80006f0:	4619      	mov	r1, r3
 80006f2:	68b8      	ldr	r0, [r7, #8]
 80006f4:	f001 f9b5 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 80006f8:	8c3b      	ldrh	r3, [r7, #32]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	68b8      	ldr	r0, [r7, #8]
 8000700:	f001 f9af 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 8000704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	68b8      	ldr	r0, [r7, #8]
 800070c:	f001 f9a9 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000710:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f001 f9a3 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 800071c:	e12d      	b.n	800097a <display7SEG+0x3aa>
		case 3:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f001 f99c 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	68b8      	ldr	r0, [r7, #8]
 8000732:	f001 f996 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000736:	8b3b      	ldrh	r3, [r7, #24]
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f001 f990 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 8000742:	8bbb      	ldrh	r3, [r7, #28]
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	68b8      	ldr	r0, [r7, #8]
 800074a:	f001 f98a 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 800074e:	8c3b      	ldrh	r3, [r7, #32]
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	68b8      	ldr	r0, [r7, #8]
 8000756:	f001 f984 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 800075a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	68b8      	ldr	r0, [r7, #8]
 8000762:	f001 f97e 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f001 f978 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 8000772:	e102      	b.n	800097a <display7SEG+0x3aa>
		case 4:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_SET);
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	68b8      	ldr	r0, [r7, #8]
 800077c:	f001 f971 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 8000780:	88bb      	ldrh	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f001 f96b 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 800078c:	8b3b      	ldrh	r3, [r7, #24]
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	68b8      	ldr	r0, [r7, #8]
 8000794:	f001 f965 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_SET);
 8000798:	8bbb      	ldrh	r3, [r7, #28]
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	68b8      	ldr	r0, [r7, #8]
 80007a0:	f001 f95f 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 80007a4:	8c3b      	ldrh	r3, [r7, #32]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	68b8      	ldr	r0, [r7, #8]
 80007ac:	f001 f959 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 80007b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	4619      	mov	r1, r3
 80007b6:	68b8      	ldr	r0, [r7, #8]
 80007b8:	f001 f953 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 80007bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	68b8      	ldr	r0, [r7, #8]
 80007c4:	f001 f94d 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 80007c8:	e0d7      	b.n	800097a <display7SEG+0x3aa>
		case 5:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f001 f946 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_SET);
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	4619      	mov	r1, r3
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f001 f940 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 80007e2:	8b3b      	ldrh	r3, [r7, #24]
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f001 f93a 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 80007ee:	8bbb      	ldrh	r3, [r7, #28]
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f001 f934 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 80007fa:	8c3b      	ldrh	r3, [r7, #32]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	f001 f92e 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 8000806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	68b8      	ldr	r0, [r7, #8]
 800080e:	f001 f928 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000812:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	68b8      	ldr	r0, [r7, #8]
 800081a:	f001 f922 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 800081e:	e0ac      	b.n	800097a <display7SEG+0x3aa>
		case 6:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f001 f91b 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_SET);
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	4619      	mov	r1, r3
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f001 f915 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 8000838:	8b3b      	ldrh	r3, [r7, #24]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f001 f90f 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 8000844:	8bbb      	ldrh	r3, [r7, #28]
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f001 f909 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 8000850:	8c3b      	ldrh	r3, [r7, #32]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	68b8      	ldr	r0, [r7, #8]
 8000858:	f001 f903 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 800085c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	68b8      	ldr	r0, [r7, #8]
 8000864:	f001 f8fd 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f001 f8f7 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 8000874:	e081      	b.n	800097a <display7SEG+0x3aa>
		case 7:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	f001 f8f0 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 8000882:	88bb      	ldrh	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f001 f8ea 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 800088e:	8b3b      	ldrh	r3, [r7, #24]
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	68b8      	ldr	r0, [r7, #8]
 8000896:	f001 f8e4 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_SET);
 800089a:	8bbb      	ldrh	r3, [r7, #28]
 800089c:	2201      	movs	r2, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	68b8      	ldr	r0, [r7, #8]
 80008a2:	f001 f8de 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 80008a6:	8c3b      	ldrh	r3, [r7, #32]
 80008a8:	2201      	movs	r2, #1
 80008aa:	4619      	mov	r1, r3
 80008ac:	68b8      	ldr	r0, [r7, #8]
 80008ae:	f001 f8d8 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_SET);
 80008b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	68b8      	ldr	r0, [r7, #8]
 80008ba:	f001 f8d2 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_SET);
 80008be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008c0:	2201      	movs	r2, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	68b8      	ldr	r0, [r7, #8]
 80008c6:	f001 f8cc 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 80008ca:	e056      	b.n	800097a <display7SEG+0x3aa>
		case 8:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f001 f8c5 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 80008d8:	88bb      	ldrh	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	68b8      	ldr	r0, [r7, #8]
 80008e0:	f001 f8bf 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 80008e4:	8b3b      	ldrh	r3, [r7, #24]
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	68b8      	ldr	r0, [r7, #8]
 80008ec:	f001 f8b9 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 80008f0:	8bbb      	ldrh	r3, [r7, #28]
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	68b8      	ldr	r0, [r7, #8]
 80008f8:	f001 f8b3 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_RESET);
 80008fc:	8c3b      	ldrh	r3, [r7, #32]
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	68b8      	ldr	r0, [r7, #8]
 8000904:	f001 f8ad 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 8000908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	f001 f8a7 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 8000914:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f001 f8a1 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 8000920:	e02b      	b.n	800097a <display7SEG+0x3aa>
		case 9:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, GPIO_PIN_RESET);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	68b8      	ldr	r0, [r7, #8]
 800092a:	f001 f89a 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, GPIO_PIN_RESET);
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f001 f894 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, GPIO_PIN_RESET);
 800093a:	8b3b      	ldrh	r3, [r7, #24]
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f001 f88e 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, GPIO_PIN_RESET);
 8000946:	8bbb      	ldrh	r3, [r7, #28]
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	68b8      	ldr	r0, [r7, #8]
 800094e:	f001 f888 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, GPIO_PIN_SET);
 8000952:	8c3b      	ldrh	r3, [r7, #32]
 8000954:	2201      	movs	r2, #1
 8000956:	4619      	mov	r1, r3
 8000958:	68b8      	ldr	r0, [r7, #8]
 800095a:	f001 f882 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, GPIO_PIN_RESET);
 800095e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	68b8      	ldr	r0, [r7, #8]
 8000966:	f001 f87c 	bl	8001a62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, GPIO_PIN_RESET);
 800096a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f001 f876 	bl	8001a62 <HAL_GPIO_WritePin>
			break;
 8000976:	e000      	b.n	800097a <display7SEG+0x3aa>
		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop

08000984 <scan_seg7_led>:

void scan_seg7_led() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af06      	add	r7, sp, #24
	  if (seg7_flag == 1) {
 800098a:	4b66      	ldr	r3, [pc, #408]	; (8000b24 <scan_seg7_led+0x1a0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	f040 80c4 	bne.w	8000b1c <scan_seg7_led+0x198>
		 switch (seg7_led_order) {
 8000994:	4b64      	ldr	r3, [pc, #400]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b03      	cmp	r3, #3
 800099a:	f200 80bb 	bhi.w	8000b14 <scan_seg7_led+0x190>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <scan_seg7_led+0x20>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	08000a0d 	.word	0x08000a0d
 80009ac:	08000a65 	.word	0x08000a65
 80009b0:	08000abd 	.word	0x08000abd
		 case 0:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	485c      	ldr	r0, [pc, #368]	; (8000b2c <scan_seg7_led+0x1a8>)
 80009ba:	f001 f852 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2104      	movs	r1, #4
 80009c2:	485a      	ldr	r0, [pc, #360]	; (8000b2c <scan_seg7_led+0x1a8>)
 80009c4:	f001 f84d 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2108      	movs	r1, #8
 80009cc:	4857      	ldr	r0, [pc, #348]	; (8000b2c <scan_seg7_led+0x1a8>)
 80009ce:	f001 f848 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4855      	ldr	r0, [pc, #340]	; (8000b2c <scan_seg7_led+0x1a8>)
 80009d8:	f001 f843 	bl	8001a62 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 80009dc:	4b52      	ldr	r3, [pc, #328]	; (8000b28 <scan_seg7_led+0x1a4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a53      	ldr	r2, [pc, #332]	; (8000b30 <scan_seg7_led+0x1ac>)
 80009e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	9304      	str	r3, [sp, #16]
 80009ea:	2320      	movs	r3, #32
 80009ec:	9303      	str	r3, [sp, #12]
 80009ee:	2310      	movs	r3, #16
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2308      	movs	r3, #8
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	2304      	movs	r3, #4
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2302      	movs	r3, #2
 80009fc:	2201      	movs	r2, #1
 80009fe:	494d      	ldr	r1, [pc, #308]	; (8000b34 <scan_seg7_led+0x1b0>)
 8000a00:	f7ff fde6 	bl	80005d0 <display7SEG>
			  seg7_led_order = 1;
 8000a04:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
			  break;
 8000a0a:	e084      	b.n	8000b16 <scan_seg7_led+0x192>
		 case 1:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4846      	ldr	r0, [pc, #280]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a12:	f001 f826 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4844      	ldr	r0, [pc, #272]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a1c:	f001 f821 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2108      	movs	r1, #8
 8000a24:	4841      	ldr	r0, [pc, #260]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a26:	f001 f81c 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	483f      	ldr	r0, [pc, #252]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a30:	f001 f817 	bl	8001a62 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000a34:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <scan_seg7_led+0x1ac>)
 8000a3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	9304      	str	r3, [sp, #16]
 8000a42:	2320      	movs	r3, #32
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	2310      	movs	r3, #16
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	2304      	movs	r3, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2302      	movs	r3, #2
 8000a54:	2201      	movs	r2, #1
 8000a56:	4937      	ldr	r1, [pc, #220]	; (8000b34 <scan_seg7_led+0x1b0>)
 8000a58:	f7ff fdba 	bl	80005d0 <display7SEG>
			  seg7_led_order = 2;
 8000a5c:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	601a      	str	r2, [r3, #0]
			  break;
 8000a62:	e058      	b.n	8000b16 <scan_seg7_led+0x192>
		 case 2:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2102      	movs	r1, #2
 8000a68:	4830      	ldr	r0, [pc, #192]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a6a:	f000 fffa 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2104      	movs	r1, #4
 8000a72:	482e      	ldr	r0, [pc, #184]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a74:	f000 fff5 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	482b      	ldr	r0, [pc, #172]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a7e:	f000 fff0 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2110      	movs	r1, #16
 8000a86:	4829      	ldr	r0, [pc, #164]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000a88:	f000 ffeb 	bl	8001a62 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <scan_seg7_led+0x1ac>)
 8000a92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	9304      	str	r3, [sp, #16]
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	9303      	str	r3, [sp, #12]
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	2201      	movs	r2, #1
 8000aae:	4921      	ldr	r1, [pc, #132]	; (8000b34 <scan_seg7_led+0x1b0>)
 8000ab0:	f7ff fd8e 	bl	80005d0 <display7SEG>
			  seg7_led_order = 3;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	601a      	str	r2, [r3, #0]
			  break;
 8000aba:	e02c      	b.n	8000b16 <scan_seg7_led+0x192>
		 case 3:
			  HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2102      	movs	r1, #2
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000ac2:	f000 ffce 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000acc:	f000 ffc9 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4815      	ldr	r0, [pc, #84]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000ad6:	f000 ffc4 	bl	8001a62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2110      	movs	r1, #16
 8000ade:	4813      	ldr	r0, [pc, #76]	; (8000b2c <scan_seg7_led+0x1a8>)
 8000ae0:	f000 ffbf 	bl	8001a62 <HAL_GPIO_WritePin>
			  display7SEG(seg7_led_buffer[seg7_led_order], GPIOB, a_1_Pin, b_1_Pin, c_1_Pin, d_1_Pin, e_1_Pin, f_1_Pin, g_1_Pin);
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <scan_seg7_led+0x1ac>)
 8000aea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	9304      	str	r3, [sp, #16]
 8000af2:	2320      	movs	r3, #32
 8000af4:	9303      	str	r3, [sp, #12]
 8000af6:	2310      	movs	r3, #16
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	2308      	movs	r3, #8
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	2304      	movs	r3, #4
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2302      	movs	r3, #2
 8000b04:	2201      	movs	r2, #1
 8000b06:	490b      	ldr	r1, [pc, #44]	; (8000b34 <scan_seg7_led+0x1b0>)
 8000b08:	f7ff fd62 	bl	80005d0 <display7SEG>
			  seg7_led_order = 0;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <scan_seg7_led+0x1a4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
			  break;
 8000b12:	e000      	b.n	8000b16 <scan_seg7_led+0x192>
		 default:
			 break;
 8000b14:	bf00      	nop
		 }
		  set_seg7_led_timer(100);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f000 fc10 	bl	800133c <set_seg7_led_timer>
	  }
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000074 	.word	0x20000074
 8000b28:	20000068 	.word	0x20000068
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	20000098 	.word	0x20000098
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <turn_off_all_led>:
void turn_off_all_led() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2120      	movs	r1, #32
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <turn_off_all_led+0x4c>)
 8000b42:	f000 ff8e 	bl	8001a62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <turn_off_all_led+0x4c>)
 8000b4c:	f000 ff89 	bl	8001a62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <turn_off_all_led+0x4c>)
 8000b56:	f000 ff84 	bl	8001a62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <turn_off_all_led+0x4c>)
 8000b62:	f000 ff7e 	bl	8001a62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <turn_off_all_led+0x4c>)
 8000b6e:	f000 ff78 	bl	8001a62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <turn_off_all_led+0x4c>)
 8000b7a:	f000 ff72 	bl	8001a62 <HAL_GPIO_WritePin>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800

08000b88 <blink>:
void blink() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <blink+0x40>)
 8000b90:	f000 ff7f 	bl	8001a92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <blink+0x40>)
 8000b9a:	f000 ff7a 	bl	8001a92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GREEN1_Pin);
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <blink+0x40>)
 8000ba2:	f000 ff76 	bl	8001a92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GREEN2_Pin);
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <blink+0x40>)
 8000bac:	f000 ff71 	bl	8001a92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, YELLOW1_Pin);
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <blink+0x40>)
 8000bb4:	f000 ff6d 	bl	8001a92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, YELLOW2_Pin);
 8000bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <blink+0x40>)
 8000bbe:	f000 ff68 	bl	8001a92 <HAL_GPIO_TogglePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010800 	.word	0x40010800

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fc45 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f9e9 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 fa6f 	bl	80010bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bde:	f000 fa21 	bl	8001024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2);
 8000be2:	48a3      	ldr	r0, [pc, #652]	; (8000e70 <main+0x2a4>)
 8000be4:	f001 fba6 	bl	8002334 <HAL_TIM_Base_Start_IT>

  int duration = 500;
 8000be8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bec:	603b      	str	r3, [r7, #0]
  int frequent = 1000 / duration;
 8000bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bf8:	607b      	str	r3, [r7, #4]

  red_count_down = DEFAULT_RED_COUNT_DOWN;
 8000bfa:	4b9e      	ldr	r3, [pc, #632]	; (8000e74 <main+0x2a8>)
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	601a      	str	r2, [r3, #0]
  green_count_down = DEFAULT_GREEN_COUNT_DOWN;
 8000c00:	4b9d      	ldr	r3, [pc, #628]	; (8000e78 <main+0x2ac>)
 8000c02:	2203      	movs	r2, #3
 8000c04:	601a      	str	r2, [r3, #0]
  yellow_count_down = DEFAULT_YELLOW_COUNT_DOWN;
 8000c06:	4b9d      	ldr	r3, [pc, #628]	; (8000e7c <main+0x2b0>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	601a      	str	r2, [r3, #0]

  current_state_trafic1 = 1; // 1: red, 2: green, 3: yellow
 8000c0c:	4b9c      	ldr	r3, [pc, #624]	; (8000e80 <main+0x2b4>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  current_state_trafic2 = 2;
 8000c12:	4b9c      	ldr	r3, [pc, #624]	; (8000e84 <main+0x2b8>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	601a      	str	r2, [r3, #0]
  trafic1_count_down = red_count_down;
 8000c18:	4b96      	ldr	r3, [pc, #600]	; (8000e74 <main+0x2a8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a9a      	ldr	r2, [pc, #616]	; (8000e88 <main+0x2bc>)
 8000c1e:	6013      	str	r3, [r2, #0]
  trafic2_count_down = green_count_down;
 8000c20:	4b95      	ldr	r3, [pc, #596]	; (8000e78 <main+0x2ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a99      	ldr	r2, [pc, #612]	; (8000e8c <main+0x2c0>)
 8000c26:	6013      	str	r3, [r2, #0]

  seg7_led_buffer[0] = trafic1_count_down / 10;
 8000c28:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <main+0x2bc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <main+0x2c4>)
 8000c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c32:	1092      	asrs	r2, r2, #2
 8000c34:	17db      	asrs	r3, r3, #31
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a96      	ldr	r2, [pc, #600]	; (8000e94 <main+0x2c8>)
 8000c3a:	6013      	str	r3, [r2, #0]
  seg7_led_buffer[1] = trafic1_count_down % 10;
 8000c3c:	4b92      	ldr	r3, [pc, #584]	; (8000e88 <main+0x2bc>)
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	4b93      	ldr	r3, [pc, #588]	; (8000e90 <main+0x2c4>)
 8000c42:	fb83 2301 	smull	r2, r3, r3, r1
 8000c46:	109a      	asrs	r2, r3, #2
 8000c48:	17cb      	asrs	r3, r1, #31
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	1aca      	subs	r2, r1, r3
 8000c56:	4b8f      	ldr	r3, [pc, #572]	; (8000e94 <main+0x2c8>)
 8000c58:	605a      	str	r2, [r3, #4]
  seg7_led_buffer[2] = trafic2_count_down / 10;
 8000c5a:	4b8c      	ldr	r3, [pc, #560]	; (8000e8c <main+0x2c0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a8c      	ldr	r2, [pc, #560]	; (8000e90 <main+0x2c4>)
 8000c60:	fb82 1203 	smull	r1, r2, r2, r3
 8000c64:	1092      	asrs	r2, r2, #2
 8000c66:	17db      	asrs	r3, r3, #31
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	4a8a      	ldr	r2, [pc, #552]	; (8000e94 <main+0x2c8>)
 8000c6c:	6093      	str	r3, [r2, #8]
  seg7_led_buffer[3] = trafic2_count_down % 10;
 8000c6e:	4b87      	ldr	r3, [pc, #540]	; (8000e8c <main+0x2c0>)
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	4b87      	ldr	r3, [pc, #540]	; (8000e90 <main+0x2c4>)
 8000c74:	fb83 2301 	smull	r2, r3, r3, r1
 8000c78:	109a      	asrs	r2, r3, #2
 8000c7a:	17cb      	asrs	r3, r1, #31
 8000c7c:	1ad2      	subs	r2, r2, r3
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	1aca      	subs	r2, r1, r3
 8000c88:	4b82      	ldr	r3, [pc, #520]	; (8000e94 <main+0x2c8>)
 8000c8a:	60da      	str	r2, [r3, #12]
  init_led();
 8000c8c:	f7ff fc78 	bl	8000580 <init_led>
  set_seg7_led_timer(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f000 fb53 	bl	800133c <set_seg7_led_timer>
  set_Trafic_Timer(duration);
 8000c96:	6838      	ldr	r0, [r7, #0]
 8000c98:	f000 fb1a 	bl	80012d0 <set_Trafic_Timer>
  set_blink_timer(500);
 8000c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca0:	f000 fb82 	bl	80013a8 <set_blink_timer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (change_mode == 1) {
 8000ca4:	4b7c      	ldr	r3, [pc, #496]	; (8000e98 <main+0x2cc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d125      	bne.n	8000cf8 <main+0x12c>
		  turn_off_all_led();
 8000cac:	f7ff ff44 	bl	8000b38 <turn_off_all_led>
		  switch (mode) {
 8000cb0:	4b7a      	ldr	r3, [pc, #488]	; (8000e9c <main+0x2d0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d81a      	bhi.n	8000cf0 <main+0x124>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <main+0xf4>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000cd9 	.word	0x08000cd9
 8000cc8:	08000ce1 	.word	0x08000ce1
 8000ccc:	08000ce9 	.word	0x08000ce9
		  case NORMAL_MODE:
			  mode = 2;
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <main+0x2d0>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
			  break;
 8000cd6:	e00c      	b.n	8000cf2 <main+0x126>
		  case ADJUST_RED_LED:
		  	  mode = 3;
 8000cd8:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <main+0x2d0>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	601a      	str	r2, [r3, #0]
		  	  break;
 8000cde:	e008      	b.n	8000cf2 <main+0x126>
		  case ADJUST_YELLOW_LED:
			  mode = 4;
 8000ce0:	4b6e      	ldr	r3, [pc, #440]	; (8000e9c <main+0x2d0>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	601a      	str	r2, [r3, #0]
			  break;
 8000ce6:	e004      	b.n	8000cf2 <main+0x126>
		  case ADJUST_GREEN_LED:
			  mode = 2;
 8000ce8:	4b6c      	ldr	r3, [pc, #432]	; (8000e9c <main+0x2d0>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	601a      	str	r2, [r3, #0]
			  break;
 8000cee:	e000      	b.n	8000cf2 <main+0x126>
		  default:
			  break;
 8000cf0:	bf00      	nop
		  }
		  change_mode = 0;
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <main+0x2cc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	  }
	  if (save_all_change == 1) {
 8000cf8:	4b69      	ldr	r3, [pc, #420]	; (8000ea0 <main+0x2d4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d11f      	bne.n	8000d40 <main+0x174>
		  mode = 1;
 8000d00:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <main+0x2d0>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
		  current_state_trafic1 = RED_STATE;
 8000d06:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <main+0x2b4>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
		  current_state_trafic2 = GREEN_STATE;
 8000d0c:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <main+0x2b8>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	601a      	str	r2, [r3, #0]
		  trafic1_count_down = red_count_down;
 8000d12:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <main+0x2a8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a5c      	ldr	r2, [pc, #368]	; (8000e88 <main+0x2bc>)
 8000d18:	6013      	str	r3, [r2, #0]
		  trafic2_count_down = green_count_down;
 8000d1a:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <main+0x2ac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a5b      	ldr	r2, [pc, #364]	; (8000e8c <main+0x2c0>)
 8000d20:	6013      	str	r3, [r2, #0]
		  init_led();
 8000d22:	f7ff fc2d 	bl	8000580 <init_led>
		  set_seg7_led_timer(100);
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	f000 fb08 	bl	800133c <set_seg7_led_timer>
		  set_Trafic_Timer(duration);
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f000 facf 	bl	80012d0 <set_Trafic_Timer>
		  set_blink_timer(500);
 8000d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d36:	f000 fb37 	bl	80013a8 <set_blink_timer>
		  save_all_change = 0;
 8000d3a:	4b59      	ldr	r3, [pc, #356]	; (8000ea0 <main+0x2d4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
	  }
	  if (mode == NORMAL_MODE) {
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <main+0x2d0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	f040 80af 	bne.w	8000ea8 <main+0x2dc>
		  // TODO run system
		  normal_led_buffer();
 8000d4a:	f7ff fab9 	bl	80002c0 <normal_led_buffer>
		  scan_seg7_led();
 8000d4e:	f7ff fe19 	bl	8000984 <scan_seg7_led>
		  if (trafic_flag == 1) {
 8000d52:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <main+0x2d8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d11b      	bne.n	8000d92 <main+0x1c6>
			  if (frequent > 0) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dd15      	ble.n	8000d8c <main+0x1c0>
				  frequent--;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
				  if (frequent == 0) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10f      	bne.n	8000d8c <main+0x1c0>
					  trafic1_count_down--;
 8000d6c:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <main+0x2bc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <main+0x2bc>)
 8000d74:	6013      	str	r3, [r2, #0]
					  trafic2_count_down--;
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <main+0x2c0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	4a43      	ldr	r2, [pc, #268]	; (8000e8c <main+0x2c0>)
 8000d7e:	6013      	str	r3, [r2, #0]
					  frequent = 1000 / duration;
 8000d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d8a:	607b      	str	r3, [r7, #4]
				  }
			  }
			  set_Trafic_Timer(duration);
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f000 fa9f 	bl	80012d0 <set_Trafic_Timer>
		  }
		  if (trafic1_count_down == 0 && current_state_trafic1 == RED_STATE) {
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <main+0x2bc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10d      	bne.n	8000db6 <main+0x1ea>
 8000d9a:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <main+0x2b4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d109      	bne.n	8000db6 <main+0x1ea>
			  show_green(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fb88 	bl	80004b8 <show_green>
			  trafic1_count_down = green_count_down;
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <main+0x2ac>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <main+0x2bc>)
 8000dae:	6013      	str	r3, [r2, #0]
			  current_state_trafic1 = GREEN_STATE;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <main+0x2b4>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	601a      	str	r2, [r3, #0]
		  }
		  if (trafic1_count_down == 0 && current_state_trafic1 == GREEN_STATE) {
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <main+0x2bc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10d      	bne.n	8000dda <main+0x20e>
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <main+0x2b4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d109      	bne.n	8000dda <main+0x20e>
			  show_yellow(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f7ff fba8 	bl	800051c <show_yellow>
			  trafic1_count_down = yellow_count_down;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <main+0x2b0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <main+0x2bc>)
 8000dd2:	6013      	str	r3, [r2, #0]
			  current_state_trafic1 = YELLOW_STATE;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <main+0x2b4>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	601a      	str	r2, [r3, #0]
		  }
		  if (trafic1_count_down == 0 && current_state_trafic1 == YELLOW_STATE) {
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <main+0x2bc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10d      	bne.n	8000dfe <main+0x232>
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <main+0x2b4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d109      	bne.n	8000dfe <main+0x232>
			  show_red(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fb32 	bl	8000454 <show_red>
			  trafic1_count_down = red_count_down;
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <main+0x2a8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <main+0x2bc>)
 8000df6:	6013      	str	r3, [r2, #0]
			  current_state_trafic1 = RED_STATE;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <main+0x2b4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
		  }

		  if (trafic2_count_down == 0 && current_state_trafic2 == RED_STATE) {
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <main+0x2c0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10d      	bne.n	8000e22 <main+0x256>
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <main+0x2b8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d109      	bne.n	8000e22 <main+0x256>
			  show_green(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff fb52 	bl	80004b8 <show_green>
			  trafic2_count_down = green_count_down;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <main+0x2ac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <main+0x2c0>)
 8000e1a:	6013      	str	r3, [r2, #0]
			  current_state_trafic2 = GREEN_STATE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <main+0x2b8>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	601a      	str	r2, [r3, #0]
		  }
		  if (trafic2_count_down == 0 && current_state_trafic2 == GREEN_STATE) {
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <main+0x2c0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10d      	bne.n	8000e46 <main+0x27a>
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <main+0x2b8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d109      	bne.n	8000e46 <main+0x27a>
			  show_yellow(2);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fb72 	bl	800051c <show_yellow>
			  trafic2_count_down = yellow_count_down;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <main+0x2b0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <main+0x2c0>)
 8000e3e:	6013      	str	r3, [r2, #0]
			  current_state_trafic2 = YELLOW_STATE;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <main+0x2b8>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	601a      	str	r2, [r3, #0]
		  }
		  if (trafic2_count_down == 0 && current_state_trafic2 == YELLOW_STATE) {
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <main+0x2c0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f47f af2a 	bne.w	8000ca4 <main+0xd8>
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <main+0x2b8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	f47f af25 	bne.w	8000ca4 <main+0xd8>
			  show_red(2);
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff fafa 	bl	8000454 <show_red>
			  trafic2_count_down = red_count_down;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <main+0x2a8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <main+0x2c0>)
 8000e66:	6013      	str	r3, [r2, #0]
			  current_state_trafic2 = RED_STATE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <main+0x2b8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e719      	b.n	8000ca4 <main+0xd8>
 8000e70:	200000b0 	.word	0x200000b0
 8000e74:	20000084 	.word	0x20000084
 8000e78:	20000094 	.word	0x20000094
 8000e7c:	20000080 	.word	0x20000080
 8000e80:	20000088 	.word	0x20000088
 8000e84:	20000090 	.word	0x20000090
 8000e88:	2000007c 	.word	0x2000007c
 8000e8c:	2000008c 	.word	0x2000008c
 8000e90:	66666667 	.word	0x66666667
 8000e94:	20000098 	.word	0x20000098
 8000e98:	2000005c 	.word	0x2000005c
 8000e9c:	20000030 	.word	0x20000030
 8000ea0:	20000064 	.word	0x20000064
 8000ea4:	2000006c 	.word	0x2000006c
		  }
	  }
	  else if (mode == ADJUST_RED_LED) {
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <main+0x3c8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d122      	bne.n	8000ef6 <main+0x32a>
		  // TODO adjust red
		  adjust_mode_red_led_buffer();
 8000eb0:	f7ff fa46 	bl	8000340 <adjust_mode_red_led_buffer>
		  scan_seg7_led();
 8000eb4:	f7ff fd66 	bl	8000984 <scan_seg7_led>
		  if (blink_flag == 1) {
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <main+0x3cc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d105      	bne.n	8000ecc <main+0x300>
			  blink();
 8000ec0:	f7ff fe62 	bl	8000b88 <blink>
			  set_blink_timer(500);
 8000ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec8:	f000 fa6e 	bl	80013a8 <set_blink_timer>
		  }
		  if (inc_detect == 1) {
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <main+0x3d0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	f47f aee7 	bne.w	8000ca4 <main+0xd8>
			  red_count_down += 1;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <main+0x3d4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <main+0x3d4>)
 8000ede:	6013      	str	r3, [r2, #0]
			  if (red_count_down == 100) {
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <main+0x3d4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b64      	cmp	r3, #100	; 0x64
 8000ee6:	d102      	bne.n	8000eee <main+0x322>
				  red_count_down = DEFAULT_RED_COUNT_DOWN;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <main+0x3d4>)
 8000eea:	2205      	movs	r2, #5
 8000eec:	601a      	str	r2, [r3, #0]
			  }
			  inc_detect = 0;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <main+0x3d0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e6d6      	b.n	8000ca4 <main+0xd8>
		  }
	  }
	  else if (mode == ADJUST_YELLOW_LED) {
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <main+0x3c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d122      	bne.n	8000f44 <main+0x378>
		  // TODO adjust green
		  adjust_mode_yellow_led_buffer();
 8000efe:	f7ff fa4d 	bl	800039c <adjust_mode_yellow_led_buffer>
		  scan_seg7_led();
 8000f02:	f7ff fd3f 	bl	8000984 <scan_seg7_led>
		  if (blink_flag == 1) {
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <main+0x3cc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d105      	bne.n	8000f1a <main+0x34e>
			  blink();
 8000f0e:	f7ff fe3b 	bl	8000b88 <blink>
			  set_blink_timer(500);
 8000f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f16:	f000 fa47 	bl	80013a8 <set_blink_timer>
		  }
		  if (inc_detect == 1) {
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <main+0x3d0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f47f aec0 	bne.w	8000ca4 <main+0xd8>
			  yellow_count_down += 1;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <main+0x3d8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <main+0x3d8>)
 8000f2c:	6013      	str	r3, [r2, #0]
			  if (yellow_count_down == 100) {
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <main+0x3d8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d102      	bne.n	8000f3c <main+0x370>
				  yellow_count_down = DEFAULT_YELLOW_COUNT_DOWN;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <main+0x3d8>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]
			  }
			  inc_detect = 0;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <main+0x3d0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e6af      	b.n	8000ca4 <main+0xd8>
		  }
	  }
	  else if (mode == ADJUST_GREEN_LED) {
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <main+0x3c8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	f47f aeab 	bne.w	8000ca4 <main+0xd8>
		  // TODO adjust yellow
		  adjust_mode_green_led_buffer();
 8000f4e:	f7ff fa53 	bl	80003f8 <adjust_mode_green_led_buffer>
		  scan_seg7_led();
 8000f52:	f7ff fd17 	bl	8000984 <scan_seg7_led>
		  if (blink_flag == 1) {
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <main+0x3cc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <main+0x39e>
			  blink();
 8000f5e:	f7ff fe13 	bl	8000b88 <blink>
			  set_blink_timer(500);
 8000f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f66:	f000 fa1f 	bl	80013a8 <set_blink_timer>
		  }
		  if (inc_detect == 1) {
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <main+0x3d0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	f47f ae98 	bne.w	8000ca4 <main+0xd8>
			  green_count_down += 1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <main+0x3dc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <main+0x3dc>)
 8000f7c:	6013      	str	r3, [r2, #0]
			  if (green_count_down == 100) {
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <main+0x3dc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d102      	bne.n	8000f8c <main+0x3c0>
				  green_count_down = DEFAULT_GREEN_COUNT_DOWN;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <main+0x3dc>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	601a      	str	r2, [r3, #0]
			  }
			  inc_detect = 0;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <main+0x3d0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
	  if (change_mode == 1) {
 8000f92:	e687      	b.n	8000ca4 <main+0xd8>
 8000f94:	20000030 	.word	0x20000030
 8000f98:	200000ac 	.word	0x200000ac
 8000f9c:	20000060 	.word	0x20000060
 8000fa0:	20000084 	.word	0x20000084
 8000fa4:	20000080 	.word	0x20000080
 8000fa8:	20000094 	.word	0x20000094

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	; 0x40
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fd72 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fd6e 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fee:	f000 f8db 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f000 ffda 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001016:	f000 f8c7 	bl	80011a8 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM2_Init+0x94>)
 800104a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001058:	2209      	movs	r2, #9
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x94>)
 800106a:	f001 f913 	bl	8002294 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001074:	f000 f898 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001086:	f001 faa9 	bl	80025dc <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001090:	f000 f88a 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x94>)
 80010a2:	f001 fc71 	bl	8002988 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f87c 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000b0 	.word	0x200000b0

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_GPIO_Init+0xbc>)
 8001108:	f000 fcab 	bl	8001a62 <HAL_GPIO_WritePin>
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_1_Pin|b_1_Pin|c_1_Pin|d_1_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	217f      	movs	r1, #127	; 0x7f
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_GPIO_Init+0xc0>)
 8001112:	f000 fca6 	bl	8001a62 <HAL_GPIO_WritePin>
                          |e_1_Pin|f_1_Pin|g_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001116:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800111a:	60bb      	str	r3, [r7, #8]
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4812      	ldr	r0, [pc, #72]	; (8001178 <MX_GPIO_Init+0xbc>)
 8001130:	f000 fb06 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_1_Pin b_1_Pin c_1_Pin d_1_Pin
                           e_1_Pin f_1_Pin g_1_Pin */
  GPIO_InitStruct.Pin = a_1_Pin|b_1_Pin|c_1_Pin|d_1_Pin
 8001134:	237f      	movs	r3, #127	; 0x7f
 8001136:	60bb      	str	r3, [r7, #8]
                          |e_1_Pin|f_1_Pin|g_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_GPIO_Init+0xc0>)
 800114c:	f000 faf8 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin INC_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|INC_Pin|SET_Pin;
 8001150:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_GPIO_Init+0xbc>)
 8001166:	f000 faeb 	bl	8001740 <HAL_GPIO_Init>

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00

08001180 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	Trafic_Timer_Run();
 8001188:	f000 f8be 	bl	8001308 <Trafic_Timer_Run>
	seg7_led_timer_run();
 800118c:	f000 f8f2 	bl	8001374 <seg7_led_timer_run>
	blink_timer_run();
 8001190:	f000 f926 	bl	80013e0 <blink_timer_run>
	get_mode_input();
 8001194:	f7fe ffda 	bl	800014c <get_mode_input>
	get_inc_input();
 8001198:	f7ff f816 	bl	80001c8 <get_inc_input>
	get_set_input();
 800119c:	f7ff f852 	bl	8000244 <get_set_input>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_MspInit+0x5c>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_MspInit+0x5c>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_MspInit+0x5c>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_MspInit+0x5c>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_MspInit+0x5c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_MspInit+0x5c>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_MspInit+0x60>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_MspInit+0x60>)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d113      	bne.n	8001252 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_TIM_Base_MspInit+0x44>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <HAL_TIM_Base_MspInit+0x44>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_TIM_Base_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201c      	movs	r0, #28
 8001248:	f000 fa43 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800124c:	201c      	movs	r0, #28
 800124e:	f000 fa5c 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f921 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM2_IRQHandler+0x10>)
 80012b6:	f001 f889 	bl	80023cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000b0 	.word	0x200000b0

080012c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <set_Trafic_Timer>:
trafic_flag = 0;
trafic_counter = 0;
seg7_flag = 0;
seg7_counter = 0;

void set_Trafic_Timer(int duration) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	trafic_counter = duration / TIMER_CYCLE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <set_Trafic_Timer+0x2c>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1092      	asrs	r2, r2, #2
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <set_Trafic_Timer+0x30>)
 80012e8:	6013      	str	r3, [r2, #0]
	trafic_flag = 0;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <set_Trafic_Timer+0x34>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	66666667 	.word	0x66666667
 8001300:	20000070 	.word	0x20000070
 8001304:	2000006c 	.word	0x2000006c

08001308 <Trafic_Timer_Run>:

void Trafic_Timer_Run() {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	if (trafic_counter > 0) {
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <Trafic_Timer_Run+0x2c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd0b      	ble.n	800132c <Trafic_Timer_Run+0x24>
		trafic_counter--;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <Trafic_Timer_Run+0x2c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	4a06      	ldr	r2, [pc, #24]	; (8001334 <Trafic_Timer_Run+0x2c>)
 800131c:	6013      	str	r3, [r2, #0]
		if (trafic_counter == 0) {
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <Trafic_Timer_Run+0x2c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <Trafic_Timer_Run+0x24>
			trafic_flag = 1;
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <Trafic_Timer_Run+0x30>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000070 	.word	0x20000070
 8001338:	2000006c 	.word	0x2000006c

0800133c <set_seg7_led_timer>:

void set_seg7_led_timer(int duration) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	seg7_counter = duration / TIMER_CYCLE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <set_seg7_led_timer+0x2c>)
 8001348:	fb82 1203 	smull	r1, r2, r2, r3
 800134c:	1092      	asrs	r2, r2, #2
 800134e:	17db      	asrs	r3, r3, #31
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4a06      	ldr	r2, [pc, #24]	; (800136c <set_seg7_led_timer+0x30>)
 8001354:	6013      	str	r3, [r2, #0]
	seg7_flag = 0;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <set_seg7_led_timer+0x34>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	66666667 	.word	0x66666667
 800136c:	20000078 	.word	0x20000078
 8001370:	20000074 	.word	0x20000074

08001374 <seg7_led_timer_run>:
void seg7_led_timer_run() {
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	if (seg7_counter > 0) {
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <seg7_led_timer_run+0x2c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dd0b      	ble.n	8001398 <seg7_led_timer_run+0x24>
		seg7_counter--;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <seg7_led_timer_run+0x2c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <seg7_led_timer_run+0x2c>)
 8001388:	6013      	str	r3, [r2, #0]
		if (seg7_counter == 0) {
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <seg7_led_timer_run+0x2c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <seg7_led_timer_run+0x24>
			seg7_flag = 1;
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <seg7_led_timer_run+0x30>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000078 	.word	0x20000078
 80013a4:	20000074 	.word	0x20000074

080013a8 <set_blink_timer>:

void set_blink_timer(int duration) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	blink_counter = duration / TIMER_CYCLE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <set_blink_timer+0x2c>)
 80013b4:	fb82 1203 	smull	r1, r2, r2, r3
 80013b8:	1092      	asrs	r2, r2, #2
 80013ba:	17db      	asrs	r3, r3, #31
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <set_blink_timer+0x30>)
 80013c0:	6013      	str	r3, [r2, #0]
	blink_flag = 0;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <set_blink_timer+0x34>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	66666667 	.word	0x66666667
 80013d8:	200000a8 	.word	0x200000a8
 80013dc:	200000ac 	.word	0x200000ac

080013e0 <blink_timer_run>:
void blink_timer_run() {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	if (blink_counter > 0) {
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <blink_timer_run+0x2c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd0b      	ble.n	8001404 <blink_timer_run+0x24>
		blink_counter--;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <blink_timer_run+0x2c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <blink_timer_run+0x2c>)
 80013f4:	6013      	str	r3, [r2, #0]
		if (blink_counter == 0) {
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <blink_timer_run+0x2c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <blink_timer_run+0x24>
			blink_flag = 1;
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <blink_timer_run+0x30>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	200000a8 	.word	0x200000a8
 8001410:	200000ac 	.word	0x200000ac

08001414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800143a:	f7ff ff43 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f001 fb0d 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001442:	f7ff fbc3 	bl	8000bcc <main>
  bx lr
 8001446:	4770      	bx	lr
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001450:	08002af4 	.word	0x08002af4
  ldr r2, =_sbss
 8001454:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001458:	200000fc 	.word	0x200000fc

0800145c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_2_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x28>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f923 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	200f      	movs	r0, #15
 8001478:	f000 f808 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fe9a 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40022000 	.word	0x40022000

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x54>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f93b 	bl	8001726 <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f903 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_InitTick+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000034 	.word	0x20000034
 80014e4:	2000003c 	.word	0x2000003c
 80014e8:	20000038 	.word	0x20000038

080014ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x1c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x20>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x20>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	2000003c 	.word	0x2000003c
 800150c:	200000f8 	.word	0x200000f8

08001510 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_GetTick+0x10>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	200000f8 	.word	0x200000f8

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4906      	ldr	r1, [pc, #24]	; (80015bc <__NVIC_EnableIRQ+0x34>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff90 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff2d 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff42 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff90 	bl	8001614 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5f 	bl	80015c0 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff35 	bl	8001588 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e148      	b.n	80019e6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8137 	bne.w	80019e0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4aa3      	ldr	r2, [pc, #652]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4aa1      	ldr	r2, [pc, #644]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4aa1      	ldr	r2, [pc, #644]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a9f      	ldr	r2, [pc, #636]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a9f      	ldr	r2, [pc, #636]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a9d      	ldr	r2, [pc, #628]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a9d      	ldr	r2, [pc, #628]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a9b      	ldr	r2, [pc, #620]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a9b      	ldr	r2, [pc, #620]	; (8001a14 <HAL_GPIO_Init+0x2d4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a99      	ldr	r2, [pc, #612]	; (8001a14 <HAL_GPIO_Init+0x2d4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a82      	ldr	r2, [pc, #520]	; (8001a18 <HAL_GPIO_Init+0x2d8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8090 	beq.w	80019e0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <HAL_GPIO_Init+0x2dc>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_GPIO_Init+0x2dc>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_GPIO_Init+0x2dc>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a49      	ldr	r2, [pc, #292]	; (8001a24 <HAL_GPIO_Init+0x2e4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1e0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a48      	ldr	r2, [pc, #288]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a47      	ldr	r2, [pc, #284]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1d8>
 8001914:	2302      	movs	r3, #2
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001918:	2303      	movs	r3, #3
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001920:	2300      	movs	r3, #0
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001932:	493b      	ldr	r1, [pc, #236]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4937      	ldr	r1, [pc, #220]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4933      	ldr	r1, [pc, #204]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 8001964:	4013      	ands	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001974:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	492d      	ldr	r1, [pc, #180]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4929      	ldr	r1, [pc, #164]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 800198c:	4013      	ands	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4923      	ldr	r1, [pc, #140]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	491f      	ldr	r1, [pc, #124]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4919      	ldr	r1, [pc, #100]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4915      	ldr	r1, [pc, #84]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3301      	adds	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f47f aeaf 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	372c      	adds	r7, #44	; 0x2c
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10310000 	.word	0x10310000
 8001a0c:	10220000 	.word	0x10220000
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10120000 	.word	0x10120000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e001      	b.n	8001a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a72:	787b      	ldrb	r3, [r7, #1]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a7e:	e003      	b.n	8001a88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	611a      	str	r2, [r3, #16]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa4:	887a      	ldrh	r2, [r7, #2]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	041a      	lsls	r2, r3, #16
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e26c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae4:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d00c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af0:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d112      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
 8001afc:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d168      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e246      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x76>
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xbc>
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6e      	ldr	r2, [pc, #440]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a67      	ldr	r2, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fcb6 	bl	8001510 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fcb2 	bl	8001510 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1fa      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe4>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fca2 	bl	8001510 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fc9e 	bl	8001510 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1e6      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x10c>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1ba      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4939      	ldr	r1, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fc57 	bl	8001510 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fc53 	bl	8001510 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e19b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4927      	ldr	r1, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fc36 	bl	8001510 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fc32 	bl	8001510 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e17a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03a      	beq.n	8001d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fc16 	bl	8001510 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc12 	bl	8001510 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e15a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 faa6 	bl	8002258 <RCC_Delay>
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fbfc 	bl	8001510 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fbf8 	bl	8001510 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e140      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	42420000 	.word	0x42420000
 8001d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a6 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fbb9 	bl	8001510 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff fbb5 	bl	8001510 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0fd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x312>
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e02d      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x334>
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	e01c      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x356>
 8001e00:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a6c      	ldr	r2, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a66      	ldr	r2, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb69 	bl	8001510 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb65 	bl	8001510 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ab      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ee      	beq.n	8001e42 <HAL_RCC_OscConfig+0x37e>
 8001e64:	e014      	b.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb53 	bl	8001510 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fb4f 	bl	8001510 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e095      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8081 	beq.w	8001fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d061      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d146      	bne.n	8001f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fb23 	bl	8001510 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff fb1f 	bl	8001510 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e067      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	492d      	ldr	r1, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a19      	ldr	r1, [r3, #32]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff faf3 	bl	8001510 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff faef 	bl	8001510 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e037      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46a>
 8001f4c:	e02f      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fadc 	bl	8001510 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff fad8 	bl	8001510 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e020      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x498>
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e013      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42420060 	.word	0x42420060

08001fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d0      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4965      	ldr	r1, [pc, #404]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b8      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d040      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07f      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e073      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06b      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4936      	ldr	r1, [pc, #216]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7ff fa2c 	bl	8001510 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7ff fa28 	bl	8001510 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e053      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d210      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e032      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002152:	f000 f821 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002156:	4602      	mov	r2, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	490a      	ldr	r1, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	5ccb      	ldrb	r3, [r1, r3]
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f98a 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	08002adc 	.word	0x08002adc
 8002190:	20000034 	.word	0x20000034
 8002194:	20000038 	.word	0x20000038

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b490      	push	{r4, r7}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a0:	1d3c      	adds	r4, r7, #4
 80021a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a8:	f240 2301 	movw	r3, #513	; 0x201
 80021ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x46>
 80021d6:	e02d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e02d      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002210:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	623b      	str	r3, [r7, #32]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6a3b      	ldr	r3, [r7, #32]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc90      	pop	{r4, r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	08002acc 	.word	0x08002acc
 800224c:	40021000 	.word	0x40021000
 8002250:	007a1200 	.word	0x007a1200
 8002254:	003d0900 	.word	0x003d0900

08002258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <RCC_Delay+0x34>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <RCC_Delay+0x38>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002274:	bf00      	nop
  }
  while (Delay --);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	60fa      	str	r2, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <RCC_Delay+0x1c>
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000034 	.word	0x20000034
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e041      	b.n	800232a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe ffac 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f000 fa6a 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d001      	beq.n	800234c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e035      	b.n	80023b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_TIM_Base_Start_IT+0x90>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_TIM_Base_Start_IT+0x4e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d004      	beq.n	8002382 <HAL_TIM_Base_Start_IT+0x4e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_TIM_Base_Start_IT+0x94>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d111      	bne.n	80023a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d010      	beq.n	80023b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a4:	e007      	b.n	80023b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40000400 	.word	0x40000400

080023cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0202 	mvn.w	r2, #2
 80023f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9b1 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9a4 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f9b3 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d122      	bne.n	800247c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d11b      	bne.n	800247c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0204 	mvn.w	r2, #4
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f987 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f97a 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f989 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b08      	cmp	r3, #8
 8002488:	d122      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d11b      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0208 	mvn.w	r2, #8
 80024a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2204      	movs	r2, #4
 80024a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f95d 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f950 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f95f 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d122      	bne.n	8002524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d11b      	bne.n	8002524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0210 	mvn.w	r2, #16
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2208      	movs	r2, #8
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f933 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f926 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f935 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0201 	mvn.w	r2, #1
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe fe18 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b80      	cmp	r3, #128	; 0x80
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa67 	bl	8002a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f8f9 	bl	800279a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0220 	mvn.w	r2, #32
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa32 	bl	8002a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_ConfigClockSource+0x18>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0b3      	b.n	800275c <HAL_TIM_ConfigClockSource+0x180>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800261a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800262c:	d03e      	beq.n	80026ac <HAL_TIM_ConfigClockSource+0xd0>
 800262e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002632:	f200 8087 	bhi.w	8002744 <HAL_TIM_ConfigClockSource+0x168>
 8002636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263a:	f000 8085 	beq.w	8002748 <HAL_TIM_ConfigClockSource+0x16c>
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	d87f      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 8002644:	2b70      	cmp	r3, #112	; 0x70
 8002646:	d01a      	beq.n	800267e <HAL_TIM_ConfigClockSource+0xa2>
 8002648:	2b70      	cmp	r3, #112	; 0x70
 800264a:	d87b      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 800264c:	2b60      	cmp	r3, #96	; 0x60
 800264e:	d050      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x116>
 8002650:	2b60      	cmp	r3, #96	; 0x60
 8002652:	d877      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 8002654:	2b50      	cmp	r3, #80	; 0x50
 8002656:	d03c      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0xf6>
 8002658:	2b50      	cmp	r3, #80	; 0x50
 800265a:	d873      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d058      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x136>
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d86f      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 8002664:	2b30      	cmp	r3, #48	; 0x30
 8002666:	d064      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x156>
 8002668:	2b30      	cmp	r3, #48	; 0x30
 800266a:	d86b      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b20      	cmp	r3, #32
 800266e:	d060      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x156>
 8002670:	2b20      	cmp	r3, #32
 8002672:	d867      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05c      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x156>
 8002678:	2b10      	cmp	r3, #16
 800267a:	d05a      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800267c:	e062      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f000 f95c 	bl	800294a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	609a      	str	r2, [r3, #8]
      break;
 80026aa:	e04e      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f000 f945 	bl	800294a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ce:	609a      	str	r2, [r3, #8]
      break;
 80026d0:	e03b      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	461a      	mov	r2, r3
 80026e0:	f000 f8bc 	bl	800285c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2150      	movs	r1, #80	; 0x50
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f913 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026f0:	e02b      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	461a      	mov	r2, r3
 8002700:	f000 f8da 	bl	80028b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2160      	movs	r1, #96	; 0x60
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f903 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 8002710:	e01b      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	461a      	mov	r2, r3
 8002720:	f000 f89c 	bl	800285c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2140      	movs	r1, #64	; 0x40
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f8f3 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 8002730:	e00b      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f000 f8ea 	bl	8002916 <TIM_ITRx_SetConfig>
        break;
 8002742:	e002      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002744:	bf00      	nop
 8002746:	e000      	b.n	800274a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002748:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a25      	ldr	r2, [pc, #148]	; (8002854 <TIM_Base_SetConfig+0xa8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x28>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x28>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <TIM_Base_SetConfig+0xac>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <TIM_Base_SetConfig+0xa8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0x52>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x52>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <TIM_Base_SetConfig+0xac>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <TIM_Base_SetConfig+0xa8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	615a      	str	r2, [r3, #20]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400

0800285c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f023 0201 	bic.w	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 030a 	bic.w	r3, r3, #10
 8002898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f023 0210 	bic.w	r2, r3, #16
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	031b      	lsls	r3, r3, #12
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	621a      	str	r2, [r3, #32]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	f043 0307 	orr.w	r3, r3, #7
 8002938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002964:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	021a      	lsls	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4313      	orrs	r3, r2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	609a      	str	r2, [r3, #8]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800299c:	2302      	movs	r3, #2
 800299e:	e041      	b.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d004      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10c      	bne.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400

08002a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4d0c      	ldr	r5, [pc, #48]	; (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f000 f822 	bl	8002ab4 <_init>
 8002a70:	2600      	movs	r6, #0
 8002a72:	4d0a      	ldr	r5, [pc, #40]	; (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002aec 	.word	0x08002aec
 8002a98:	08002aec 	.word	0x08002aec
 8002a9c:	08002aec 	.word	0x08002aec
 8002aa0:	08002af0 	.word	0x08002af0

08002aa4 <memset>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4402      	add	r2, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
